rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getCompanyIdForUser(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function getUserRole(companyId, userId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
    }

    function getRolePermissions(companyId, roleName) {
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    function hasPermission(permission) {
      let companyId = getCompanyIdForUser(request.auth.uid);
      let userRole = getUserRole(companyId, request.auth.uid);
      let permissions = getRolePermissions(companyId, userRole);
      return permission in permissions;
    }
    
    function isPlatformAdmin() {
      let companyId = getCompanyIdForUser(request.auth.uid);
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      let userRole = getUserRole(companyId, request.auth.uid);
      let lowerCaseName = companyName.lower();
      return (lowerCaseName == "cloud morphix" || lowerCaseName == "loud morphix") && userRole == "Admin";
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Company Registration ---
    // Allow a new user to create a company, their user profile, default roles, and a lookup entry
    // This is a batch write, so we can't read other documents in the same transaction.
    // We check that the user is creating documents associated with their own UID.
    match /companies/{companyId} {
      allow create: if request.auth.uid != null
                      && request.resource.data.company_name is string
                      && request.resource.data.industry is string;

      // Allow reads of company data for any authenticated user in that company
      allow read: if getCompanyIdForUser(request.auth.uid) == companyId;

      match /users/{userId} {
        allow create: if request.auth.uid == userId; // New user creating their own profile
        allow read: if getCompanyIdForUser(request.auth.uid) == companyId; // Any user in company can read other user profiles

        // Allow users to update only their own name.
        // Admins can update other users' roles.
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])
                       || hasPermission('manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']);
        
        // Admins can remove users
        allow delete: if hasPermission('manage_users');
      }

      match /roles/{roleName} {
        allow create: if request.auth.uid != null; // Part of company creation
        allow read: if getCompanyIdForUser(request.auth.uid) == companyId;
        allow write: if hasPermission('manage_roles');
      }
      
      match /audit_logs/{logId} {
        allow read: if hasPermission('manage_users') || hasPermission('manage_roles');
        allow create: if request.auth.uid != null;
      }
    }

    // Allow user to create their own lookup doc.
    match /user_company_lookup/{userId} {
      allow create: if request.auth.uid == userId;
    }
    
    // --- Contact Form Submissions ---
    match /contacts/{contactId} {
        // Anyone can submit the form (unauthenticated)
        allow create: if true;
        
        // Only Platform Admins can read the contact submissions
        allow read: if isPlatformAdmin();
    }
  }
}
