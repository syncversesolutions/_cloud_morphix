
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper to check if a user is performing their initial registration.
    // The key indicator is that a lookup document for their UID does not yet exist.
    function isNewUserRegistration() {
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    // Helper to get the company ID for the currently authenticated user.
    function getUserCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }

    // Helper to get the role object for the currently authenticated user.
    function getUserRole(companyId) {
      let userRoleName = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRoleName)).data;
    }

    // Helper to check if the user's role grants them a specific permission.
    function hasPermission(permission) {
      let companyId = getUserCompanyId();
      let userRole = getUserRole(companyId);
      return permission in userRole.allowed_actions;
    }

    // Helper to check if the user is an Admin of their company.
    function isCompanyAdmin() {
      let companyId = getUserCompanyId();
      let userRole = getUserRole(companyId);
      return userRole.role_name == 'Admin';
    }

    // --- Company Collection Rules ---
    match /companies/{companyId} {
      // Allow creation only if the user is brand new (no lookup doc exists).
      allow create: if isNewUserRegistration();

      // Allow reads only if the user is a member of that company.
      allow read: if isSignedIn() && getUserCompanyId() == companyId;

      // No client-side updates or deletes on the company document itself.
      allow update, delete: if false;

      // --- User Sub-collection Rules ---
      match /users/{userId} {
        // Allow user creation ONLY during new user registration, and you can only create your own user doc.
        allow create: if isNewUserRegistration() && request.auth.uid == userId;

        // Allow reading a user's profile if you are that user, or if you are an admin of the same company.
        allow read: if isSignedIn() && getUserCompanyId() == companyId && (request.auth.uid == userId || isCompanyAdmin());

        // Complex update logic:
        // 1. You can update your own 'fullName'.
        // 2. An admin can update another user's 'role'.
        allow update: if isSignedIn() && getUserCompanyId() == companyId &&
                       ( (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                         (isCompanyAdmin() && hasPermission('manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])) );

        // Allow deletion only by an admin with permission, and you can't delete yourself.
        allow delete: if isSignedIn() && getUserCompanyId() == companyId && isCompanyAdmin() && hasPermission('manage_users') && request.auth.uid != userId;
      }

      // --- Roles Sub-collection Rules ---
      match /roles/{roleName} {
        // Allow role creation during registration OR by an admin with permission.
        allow create: if isNewUserRegistration() || (isSignedIn() && getUserCompanyId() == companyId && hasPermission('manage_roles'));
        
        // Allow reading roles if you are a member of the company.
        allow read: if isSignedIn() && getUserCompanyId() == companyId;

        // Allow updating/deleting roles only by an admin with permission. The Admin role is protected.
        allow update, delete: if isSignedIn() && getUserCompanyId() == companyId && hasPermission('manage_roles') && resource.data.role_name != 'Admin';
      }

      // --- Audit Log Sub-collection Rules ---
      match /audit_logs/{logId} {
        // Only company admins can read audit logs.
        allow read: if isSignedIn() && getUserCompanyId() == companyId && isCompanyAdmin();
        // Logs are created by server-side logic (trusted), not directly by clients.
        allow create: if isSignedIn() && getUserCompanyId() == companyId;
        // Logs are immutable.
        allow update, delete: if false;
      }
    }

    // --- User to Company Lookup Collection Rules ---
    match /user_company_lookup/{userId} {
      // Allow creation only if a user is creating their own lookup document during registration.
      allow create: if isNewUserRegistration() && request.auth.uid == userId;
      
      // Allow reading only your own lookup document.
      allow read: if isSignedIn() && request.auth.uid == userId;

      // Do not allow client-side updates or deletes.
      allow update, delete: if false;
    }

    // --- Contacts Collection Rules ---
    match /contacts/{contactId} {
      // The contact form is public, so anyone can create a submission.
      allow create: if true;

      // Only platform administrators ("Cloud Morphix" company admins) can read submissions.
      function isPlatformAdmin() {
        let companyId = getUserCompanyId();
        let userProfile = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data;
        return userProfile.companyName == 'Cloud Morphix' && userProfile.role == 'Admin';
      }
      allow read, update, delete: if isSignedIn() && isPlatformAdmin();
    }
  }
}
