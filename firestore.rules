rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Checks if a user document exists for the currently signed-in user.
    // This is the key to differentiating a new registration from an existing user's action.
    function isExistingUser() {
      // This function relies on the fact that the user_company_lookup is the last thing created
      // in the registration batch. For the rules on the documents themselves, we check this.
      return exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    // Gets the company ID for the currently signed-in user.
    function getMyCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }
    
    // Checks if the requesting user belongs to the company they are trying to access.
    function isMemberOf(companyId) {
      return isSignedIn() && isExistingUser() && getMyCompanyId() == companyId;
    }

    // Checks if the user has a specific permission based on their role.
    function hasPermission(permission) {
        let companyId = getMyCompanyId();
        let userRole = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
        // Role permissions are stored in the 'roles' subcollection, keyed by role name.
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRole)).data.allowed_actions.hasAny([permission]);
    }
    
    // A platform admin is an admin of the "Cloud Morphix" company.
    function isPlatformAdmin() {
        if (!isSignedIn() || !isExistingUser()) {
          return false;
        }
        let companyId = getMyCompanyId();
        let companyData = get(/databases/$(database)/documents/companies/$(companyId)).data;
        return companyData.company_name == 'Cloud Morphix' && hasPermission('manage_users');
    }

    // --- Document Rules ---

    match /companies/{companyId} {
      allow read: if isMemberOf(companyId);

      // CREATE: Allowed only if the user is a new user (doesn't exist yet).
      allow create: if isSignedIn() && !isExistingUser();

      // No direct updates or deletes to the company doc from the client.
      allow update, delete: if false;

      match /users/{userId} {
        allow read: if isMemberOf(companyId);

        // CREATE: A user profile can only be created if it's the signed-in user themself,
        // and only as part of the initial registration process.
        allow create: if isSignedIn() && !isExistingUser() && request.auth.uid == userId;

        // UPDATE: A user can update their own fullName. An admin can update another user's role.
        allow update: if isMemberOf(companyId) && 
          (
            (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
            (hasPermission('manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']))
          );
        
        // DELETE: Only users with 'manage_users' permission can delete other users.
        // A user cannot delete themselves.
        allow delete: if isMemberOf(companyId) && hasPermission('manage_users') && request.auth.uid != userId;
      }

      match /roles/{roleName} {
        allow read: if isMemberOf(companyId);

        // CREATE can happen during registration OR by an admin.
        allow create: if (isSignedIn() && !isExistingUser()) || (isMemberOf(companyId) && hasPermission('manage_roles'));

        // UPDATE: Only users with 'manage_roles' permission.
        allow update: if isMemberOf(companyId) && hasPermission('manage_roles');
        
        // DELETE: Disallow client-side role deletion to prevent breaking the system.
        allow delete: if false;
      }
      
      match /audit_logs/{logId} {
        allow read: if isPlatformAdmin() || (isMemberOf(companyId) && hasPermission('manage_users'));
        allow write: if false; // Logs should only be written by a trusted backend.
      }
    }

    match /user_company_lookup/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;

      // CREATE: A user can only create their own lookup document, and only if one doesn't exist.
      allow create: if isSignedIn() && !isExistingUser() && request.auth.uid == userId;

      // No client-side updates/deletes to the lookup table.
      allow update, delete: if false;
    }

    match /contacts/{contactId} {
        // Anyone can create a contact request. Auth is not required.
        allow create: if true;
        // Only platform admins can view or manage contacts.
        allow read, update, delete: if isPlatformAdmin();
    }
  }
}
