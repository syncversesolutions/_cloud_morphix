rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isCompanyMember(companyId) {
      return exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function getUserRole(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
    }

    function getRolePermissions(companyId, roleName) {
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    function hasPermission(companyId, permission) {
      // Check if user is a member of the company before checking permissions.
      if (!isCompanyMember(companyId)) {
        return false;
      }
      let userRole = getUserRole(companyId);
      let permissions = getRolePermissions(companyId, userRole);
      // Ensure permissions is a list before checking for a key.
      return permission in permissions;
    }

    function isPlatformAdmin() {
      // Ensure the user is signed in and has a company lookup before proceeding.
      if (!isSignedIn() || !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) {
        return false;
      }
      let myCompanyId = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
      let companyName = get(/databases/$(database)/documents/companies/$(myCompanyId)).data.company_name;
      let userRole = getUserRole(myCompanyId);
      return companyName == 'Cloud Morphix' && userRole == 'Admin';
    }

    // --- Main Rules ---

    // Company documents and their subcollections
    match /companies/{companyId} {
      // Allow a signed-in user to create a company document. The sub-collection rules below are the real gatekeepers for the registration transaction.
      allow create: isSignedIn();
      // Only platform admins can read the top-level company document. Regular users get company info via their profile.
      allow read: isPlatformAdmin();
      // No one can update or delete a company document from the client.
      allow update, delete: false;

      // User profiles within a company
      match /users/{userId} {
        allow read: isCompanyMember(companyId);

        // CREATE:
        // 1. A new user registering (requesting user is the user being created, and they are not yet a member of any company).
        // 2. An admin with 'manage_users' permission adding a new user.
        allow create: (isSignedIn() && request.auth.uid == userId && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) ||
                      (hasPermission(companyId, 'manage_users'));

        // UPDATE:
        // 1. A user can update their own fullName.
        // 2. An admin can update another user's role.
        // The affectedKeys().hasOnly() method ensures ONLY the specified fields are being changed.
        allow update: (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                      (hasPermission(companyId, 'manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
        
        // DELETE: An admin can delete another user.
        allow delete: hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
      }

      // Roles within a company
      match /roles/{roleName} {
        allow read: isCompanyMember(companyId);
        allow create, update: hasPermission(companyId, 'manage_roles');
        allow delete: false; // Prevent orphaning users
      }

      // Audit logs within a company
      match /audit_logs/{logId} {
        allow read: hasPermission(companyId, 'manage_users');
        // Logs are created by our trusted backend (firestore.ts), which authenticates as a user.
        allow create: isCompanyMember(companyId); 
        allow update, delete: false; // Immutable
      }
    }

    // User-to-company mapping
    match /user_company_lookup/{userId} {
      // A user can read their own lookup document.
      allow read: request.auth.uid == userId;
      // A user can create their own lookup document if it does not already exist.
      allow create: request.auth.uid == userId && !exists(/databases/$(database)/documents/user_company_lookup/$(userId));
      // No one can update a lookup document.
      allow update: false;
      // An admin can delete a user's lookup document (when removing them from a company).
      allow delete: hasPermission(resource.data.companyId, 'manage_users') && request.auth.uid != userId;
    }
    
    // Public contact form submissions
    match /contacts/{contactId} {
        allow create: true; // Anyone can submit a contact form
        allow read: isSignedIn() && isPlatformAdmin(); // Only platform admins can read them
        allow update, delete: false; // Immutable
    }
  }
}
