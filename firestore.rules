
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    // A "new user" is one who is signed in but does not have a lookup document yet.
    // This state only exists during the initial registration batch write.
    function isNewUser() {
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }

    function getUserCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }
    
    function isUserInCompany(userId, companyId) {
      return getUserCompanyId(userId) == companyId;
    }

    function getRoleData(userId, companyId) {
      let userRoleName = get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRoleName)).data;
    }
    
    function hasPermission(permission) {
      if (!isSignedIn() || !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) {
        return false;
      }
      let companyId = getUserCompanyId(request.auth.uid);
      let roleData = getRoleData(request.auth.uid, companyId);
      // 'in' operator checks for value presence in a list.
      return permission in roleData.allowed_actions;
    }
    
    function isPlatformAdmin() {
      if (!isSignedIn() || !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) {
        return false;
      }
      let companyId = getUserCompanyId(request.auth.uid);
      // This is brittle, but matches the client-side logic.
      // A better implementation would use a custom claim or a specific field.
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      let userRoleName = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
      
      return companyName == 'Cloud Morphix' && userRoleName == 'Admin';
    }

    // --- RULES ---

    match /user_company_lookup/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      
      // Allow create for a new user registering themselves, OR for an admin managing users.
      allow create: if (isSignedIn() && request.auth.uid == userId && isNewUser()) || hasPermission('manage_users');
                      
      allow delete: if hasPermission('manage_users');
      allow update: if false; // Lookup should be immutable
    }

    match /companies/{companyId} {
      // Allow create only for a new user.
      allow create: if isNewUser();
      
      allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
      
      allow update, delete: if false; // Company doc updates should be handled by a super-admin process.

      match /users/{userId} {
        // Allow create for a new user registering themselves, OR an admin creating a user.
        allow create: if (isSignedIn() && request.auth.uid == userId && isNewUser()) || hasPermission('manage_users');
        
        // Allow read for self, OR for an admin in the same company.
        allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId) && (request.auth.uid == userId || hasPermission('manage_users'));

        // Allow update for self (only name), OR admin (only role), OR ETL (only dashboardUrl).
        allow update: if isSignedIn() && isUserInCompany(request.auth.uid, companyId)
                      && (
                        (request.auth.uid == userId && request.resource.data.keys().hasOnly(['fullName'])) ||
                        (hasPermission('manage_users') && request.resource.data.keys().hasOnly(['role'])) ||
                        (request.resource.data.keys().hasOnly(['dashboardUrl'])) // For ETL process
                      );
                      
        allow delete: if hasPermission('manage_users') && isUserInCompany(request.auth.uid, companyId);
      }
      
      match /roles/{roleName} {
        // Allow create for a new user (for default roles), OR for an admin with permission.
        allow create: if isNewUser() || hasPermission('manage_roles');

        allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
         
        allow update, delete: if hasPermission('manage_roles');
      }

      match /audit_logs/{logId} {
        allow read: if hasPermission('manage_users');
        // Allow any user in the company to create audit logs. The action being logged is what matters.
        allow create: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
        allow update, delete: if false;
      }
    }
    
    match /contacts/{contactId} {
        // Allow anyone to submit the contact form.
        allow create: if true; 
        allow read: if isPlatformAdmin();
        allow update, delete: if false;
    }
  }
}
