
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // --- Rule Definitions ---

    // Anyone can submit the contact form. Only platform admins can read them.
    match /contacts/{contactId} {
      allow create: if request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.companyName is string;
      
      allow read, list: if isSignedIn() &&
                         exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                         (
                           get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true
                         );
      allow update, delete: if false;
    }
    
    // A user can create/read their own lookup doc. It cannot be changed.
    match /user_company_lookup/{userId} {
      allow get, create: if isOwner(userId);
      allow update, delete: if false;
    }

    // Company documents
    match /companies/{companyId} {
      // Allow list only for platform admins
      allow list: if isSignedIn() && 
                   exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;

      // Allow get for members of that company OR platform admins
      allow get: if (isSignedIn() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) &&
                  (
                    get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId ||
                    get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true
                  );

      // Any authenticated user can create a company (for registration).
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // User profiles within a company
    match /companies/{companyId}/users/{userId} {
      allow get, list: if isSignedIn() && 
                        exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;

      // Create/Update/Delete requires checking the user's role permissions
      allow write: if isSignedIn() &&
                    exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                    // Rule for creating/updating own user doc during registration
                    (
                      isOwner(userId)
                    ) 
                    || 
                    // Rule for admins managing users
                    (
                      get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                      get(/databases/$(database)/documents/companies/$(companyId)/roles/$(get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role)).data.allowed_actions['manage_users'] == true
                    );
    }

    // Roles within a company
    match /companies/{companyId}/roles/{roleId} {
      allow get, list: if isSignedIn() && 
                        exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;

      // Create/update allowed for admins, or during initial company setup
      allow create, update: if (isSignedIn() && 
                                exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                                get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                                get(/databases/$(database)/documents/companies/$(companyId)/roles/$(get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role)).data.allowed_actions['manage_roles'] == true
                               )
                               // Allow initial role creation during company setup by checking if the user doc exists yet
                               || (isSignedIn() && !exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)));
      allow delete: if false;
    }
    
    // Audit logs are append-only.
    match /companies/{companyId}/audit_logs/{logId} {
      allow create: if isSignedIn() && 
                     exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && 
                     get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
      allow read, list, update, delete: if false;
    }
  }
}
