
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUserInCompany(userId, companyId) {
      return exists(/databases/$(database)/documents/user_company_lookup/$(userId)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId == companyId;
    }
    
    function getUserRoleName(userId, companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
    }

    function getRolePermissions(companyId, roleName) {
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    function isPlatformAdmin() {
      let companyId = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      return isSignedIn() && isUserInCompany(request.auth.uid, companyId) && companyName == 'Cloud Morphix';
    }

    function hasPermission(companyId, permission) {
      let userRoleName = getUserRoleName(request.auth.uid, companyId);
      let permissionsList = getRolePermissions(companyId, userRoleName);
      return isSignedIn() && isUserInCompany(request.auth.uid, companyId) && permission in permissionsList;
    }
    
    // --- Rules ---
    match /contacts/{contactId} {
      allow create: if true;
      allow read, update, delete: if isSignedIn() && isPlatformAdmin();
    }

    match /user_company_lookup/{userId} {
      // Allow creation if you are creating your own record (self-registration) OR if you are an admin creating a record for a new user in your company.
      allow create: if (isSignedIn() && request.auth.uid == userId) || (isSignedIn() && hasPermission(request.resource.data.companyId, 'manage_users'));
      allow read: if isSignedIn() && request.auth.uid == userId;
      // Admin can delete a user's lookup doc.
      allow delete: if isSignedIn() && hasPermission(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId, 'manage_users');
      allow update: if false; // Should not be updatable.
    }

    match /companies/{companyId} {
      allow create: if isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
      allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
      allow update: if hasPermission(companyId, 'manage_roles');

      match /users/{userId} {
        allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
        // Allow creating user if you are an admin in that company, OR if you are creating your own user doc during registration.
        allow create: if (isSignedIn() && hasPermission(companyId, 'manage_users')) || (isSignedIn() && request.auth.uid == userId);
        // User can update own doc. Admin can update any doc.
        allow update: if (isSignedIn() && request.auth.uid == userId) || hasPermission(companyId, 'manage_users');
        allow delete: if hasPermission(companyId, 'manage_users');
      }

      match /roles/{roleName} {
        allow read: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
        // Allow role creation ONLY if the company doesn't exist yet (initial setup) OR if the user has permission.
        allow create: if (request.resource.data.role_name != 'Admin' && hasPermission(companyId, 'manage_roles')) || (!exists(/databases/$(database)/documents/companies/$(companyId)));
        allow update, delete: if request.resource.data.role_name != 'Admin' && hasPermission(companyId, 'manage_roles');
      }

      match /audit_logs/{logId} {
        allow read, create: if isSignedIn() && isUserInCompany(request.auth.uid, companyId);
        allow update, delete: if false;
      }
    }
  }
}
