rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Identifies if the request is part of the initial user/company registration flow.
    function isRegistration() {
      return isAuthenticated() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    // Checks if the authenticated user is a platform-level administrator.
    function isPlatformAdmin() {
      if (!isAuthenticated()) { return false; }
      
      let lookupPath = /databases/$(database)/documents/user_company_lookup/$(request.auth.uid);
      if (!exists(lookupPath)) { return false; }

      let companyId = get(lookupPath).data.companyId;
      let userProfile = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data;
      
      return userProfile.isPlatformAdmin == true;
    }
    
    // Gets the company ID for the authenticated user.
    function getCompanyId() {
      if (!isAuthenticated()) { return null; }
      let lookupPath = /databases/$(database)/documents/user_company_lookup/$(request.auth.uid);
      if (!exists(lookupPath)) { return null; }
      return get(lookupPath).data.companyId;
    }
    
    // Checks if the authenticated user belongs to the specified company.
    function isUserInCompany(companyId) {
      return isAuthenticated() && getCompanyId() == companyId;
    }
    
    // Checks if the authenticated user has a specific permission based on their role.
    function userHasPermission(permission) {
      let companyId = getCompanyId();
      if (companyId == null) { return false; }
      let userRole = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
      let rolePermissions = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRole)).data.allowed_actions;
      return rolePermissions[permission] == true;
    }
    
    // --- Collection Rules ---
    match /companies/{companyId} {
      // Allow read if the user is part of the company or a platform admin.
      allow read: if isUserInCompany(companyId) || isPlatformAdmin();
      
      // Allow creation only for a new user registration.
      allow create: if isRegistration();
      
      // Only platform admins can update company details.
      allow update: if isPlatformAdmin();
      
      // Disallow deleting companies for now.
      allow delete: if false;

      // --- Subcollection Rules for Users ---
      match /users/{userId} {
        // Allow read if the requesting user is in the same company or is a platform admin.
        allow read: if isUserInCompany(companyId) || isPlatformAdmin();
        
        // Allow creation for new registration or if an admin invites a user.
        allow create: if (isRegistration() && request.auth.uid == userId) ||
                         (isUserInCompany(companyId) && userHasPermission('manage_users'));

        // Allow a user to update their own fullName.
        // Allow an admin to update another user's role, but not their own or another admin's.
        allow update: if isAuthenticated() && (
          // Case 1: User is updating their own fullName and nothing else.
          (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
          ||
          // Case 2: Admin with permission is updating another user's role.
          (
            userHasPermission('manage_users') &&
            request.auth.uid != userId && // Cannot change own role
            resource.data.role != 'Admin' && // Cannot change an existing Admin's role
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])
          )
        );
        
        // Allow user deletion if the deleter has 'manage_users' permission
        // and is not deleting themselves or an Admin.
        allow delete: if isUserInCompany(companyId) &&
                         userHasPermission('manage_users') &&
                         request.auth.uid != userId &&
                         resource.data.role != 'Admin';
      }
      
      // --- Subcollection Rules for Roles ---
      match /roles/{roleId} {
        // Any user in the company can read the roles.
        allow read: if isUserInCompany(companyId);

        // Allow creation during registration or by an admin with permissions.
        allow create: if (isRegistration() && (roleId == 'Admin' || roleId == 'Viewer' || roleId == 'Analyst')) ||
                         (isUserInCompany(companyId) && userHasPermission('manage_roles') && roleId != 'Admin');

        // Only users with 'manage_roles' permission can update roles.
        // The 'Admin' role cannot be modified.
        allow update: if isUserInCompany(companyId) && userHasPermission('manage_roles') && roleId != 'Admin';
        
        allow delete: if false; // Disallow deleting roles for now
      }

      // --- Subcollection Rules for Audit Logs (read-only for clients) ---
      match /audit_logs/{logId} {
          allow read: if isUserInCompany(companyId) && userHasPermission('manage_users');
          allow write: if false;
      }
    }
    
    // --- Lookup collection to map users to companies ---
    match /user_company_lookup/{userId} {
      allow read: if request.auth.uid == userId;
      
      // Allow creation only during registration.
      allow create: if isRegistration() && request.auth.uid == userId;
      
      // Disallow updates and deletes to prevent users from changing their company.
      allow update, delete: if false;
    }
    
    // --- Contact form submissions ---
    match /contacts/{contactId} {
        allow create: if true; // Anyone can submit the form.
        
        // Only platform admins can read.
        allow read: if isPlatformAdmin(); 
        
        // No client updates/deletes.
        allow update, delete: if false;
    }
  }
}
