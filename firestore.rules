
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user's UID exists in the user_company_lookup collection
    // and if their assigned companyId matches the one in the path.
    // This function should only be used for rules on existing documents, not during creation.
    function isUserInCompany(companyId) {
      let userLookupPath = /databases/$(database)/documents/user_company_lookup/$(request.auth.uid);
      return isSignedIn() && exists(userLookupPath) && get(userLookupPath).data.companyId == companyId;
    }
    
    // Retrieves the requesting user's data from the users subcollection.
    function getUserData(companyId) {
      let userDocPath = /databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid);
      return get(userDocPath).data;
    }

    // Checks if the user has a specific permission.
    // The 'Admin' role has all permissions implicitly.
    // For other roles, it checks the role document's 'allowed_actions' list.
    function hasPermission(companyId, permission) {
      if (!isUserInCompany(companyId)) {
        return false;
      }
      let userData = getUserData(companyId);
      let roleName = userData.role;
      
      if (roleName == 'Admin') {
        return true;
      }
      
      let roleDocPath = /databases/$(database)/documents/companies/$(companyId)/roles/$(roleName);
      return exists(roleDocPath) && permission in get(roleDocPath).data.allowed_actions;
    }


    // --- Path-based Rules ---
    match /companies/{companyId} {
      // READ: Any authenticated user belonging to the company can read the company document.
      allow read: if isUserInCompany(companyId);

      // CREATE: A signed-in user can create a company document. This is the entry point for registration.
      // Further checks on the subcollections ensure this is a valid registration operation.
      allow create: if isSignedIn();

      // Company document is immutable from the client-side after creation.
      allow update, delete: if false;

      match /users/{userId} {
        // READ: Any user in the company can read other user profiles within the same company.
        allow read: if isUserInCompany(companyId);
        
        // CREATE:
        // Case 1 (Registration): A new user is creating their own user document. This is only allowed if
        // their role is 'Admin', ensuring the first user of a company is always an admin.
        // Case 2 (Invite): An existing user with 'manage_users' permission is creating a new user.
        allow create: if (isSignedIn() && request.auth.uid == userId && request.resource.data.role == 'Admin') ||
                         (hasPermission(companyId, 'manage_users'));
                         
        // UPDATE:
        // Case 1: A user is updating their own profile. They are only allowed to change their 'fullName'.
        // Case 2: An admin with 'manage_users' is changing another user's 'role'.
        allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                         (hasPermission(companyId, 'manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
                         
        // DELETE: An admin can remove another user from the company.
        allow delete: if hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
      }
      
      match /roles/{roleName} {
        // READ: Any user in the company can read the available roles.
        allow read: if isUserInCompany(companyId);

        // CREATE:
        // Case 1 (Registration): The default roles 'Admin', 'Viewer', 'Analyst' must be created.
        // Case 2 (Admin Action): A user with 'manage_roles' permission is creating a new custom role.
        allow create: if (isSignedIn() && roleName in ['Admin', 'Viewer', 'Analyst']) ||
                         (hasPermission(companyId, 'manage_roles'));
                          
        // UPDATE/DELETE: An admin can manage roles, but cannot change the core 'Admin' role.
        allow update, delete: if hasPermission(companyId, 'manage_roles') && roleName != 'Admin';
      }

      match /audit_logs/{logId} {
          allow read: if hasPermission(companyId, 'manage_users'); // Or a more specific audit permission
          // Logs are created by a trusted backend process (e.g., Cloud Functions), not the client.
          allow write: if false; 
      }
    }
    
    match /user_company_lookup/{userId} {
      // READ: A user can only read their own lookup document.
      allow read: if request.auth.uid == userId;

      // CREATE: A user can only create their own lookup document. This happens on registration.
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Lookup document is immutable from the client.
      allow update, delete: if false;
    }
    
    match /contacts/{contactId} {
        // Public contact form, anyone can create.
        allow create: if true; 
        // Read/write only from a trusted backend environment.
        allow read, write, delete: if false; 
    }
  }
}
