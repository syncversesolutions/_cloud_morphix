rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    // Function to check if a user is a member of a given company.
    // It looks up the companyId associated with the requesting user.
    function isMemberOfCompany(companyId) {
      return exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
          && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    // Function to check if the user is a platform administrator.
    function isPlatformAdmin() {
      // First, get the user's company ID from the lookup table.
      let userCompanyId = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
      // Then, get the user's profile from within their company and check the flag.
      return get(/databases/$(database)/documents/companies/$(userCompanyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // Function to check if the current request is for the user's own document.
    function isOwnProfile(userId) {
        return request.auth.uid == userId;
    }

    // Function to check if a user has a specific permission based on their role.
    function hasPermission(companyId, permission) {
        // Get the user's role name from their profile.
        let roleName = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
        // Get the role document and check if the permission is in the allowed_actions map.
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions[permission] == true;
    }

    // --- Collection Rules ---

    // Rules for the user_company_lookup collection.
    // This collection maps a user's UID to their company's ID.
    match /user_company_lookup/{userId} {
        // Allow read only if the user is requesting their own lookup document.
        allow read: if isSignedIn() && isOwnProfile(userId);
        // Allow write only if the user document does not exist yet (i.e., during registration).
        allow write: if !exists(/databases/$(database)/documents/user_company_lookup/$(userId));
    }
    
    // Rules for the top-level 'companies' collection.
    match /companies/{companyId} {
        // Allow a user to read their own company document, or if they are a platform admin.
        allow read: if isSignedIn() && (isMemberOfCompany(companyId) || isPlatformAdmin());
        // Allow a company document to be created only if the corresponding user lookup does not exist yet.
        allow create: if !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
        // No updates or deletes to company documents for now to prevent accidental changes.
        allow update, delete: if false;

        // --- Sub-collection Rules for 'users' ---
        match /users/{userId} {
            // Allow users to read profiles of other users within the same company.
            allow read: if isSignedIn() && isMemberOfCompany(companyId);
            // Allow creation of a user profile. This handles both initial registration and admins adding new users.
            allow create: if (
                // Case 1: Initial registration. The user is creating their own profile.
                isOwnProfile(userId) && !exists(/databases/$(database)/documents/user_company_lookup/$(userId))
              ) || (
                // Case 2: An admin is adding a new user.
                isSignedIn() && isMemberOfCompany(companyId) && hasPermission(companyId, 'manage_users')
              );

            // Allow updates to user profiles under specific conditions.
            allow update: if isSignedIn() && isMemberOfCompany(companyId) && (
                // A user can update their own 'fullName'.
                (isOwnProfile(userId) && request.resource.data.keys().hasOnly(['fullName'])) ||
                // An admin with 'manage_users' permission can update another user's 'role'.
                (hasPermission(companyId, 'manage_users') && request.resource.data.keys().hasOnly(['role']))
              );

            // Allow deletion only by an admin with 'manage_users' permission.
            allow delete: if isSignedIn() && isMemberOfCompany(companyId) && hasPermission(companyId, 'manage_users');
        }

        // --- Sub-collection Rules for 'roles' ---
        match /roles/{roleName} {
            // Allow any member of the company to read the roles.
            allow read: if isSignedIn() && isMemberOfCompany(companyId);
            // Allow create, update, and delete only for users with 'manage_roles' permission.
            allow write: if isSignedIn() && isMemberOfCompany(companyId) && hasPermission(companyId, 'manage_roles');
        }
        
        // --- Sub-collection Rules for 'audit_logs' ---
        // Only allow creation. Logs are immutable.
        match /audit_logs/{logId} {
            allow read: if false; // Logs should not be readable by clients.
            allow write: if isSignedIn() && isMemberOfCompany(companyId); // Any authenticated member can trigger actions that create logs.
        }
    }
    
    // Rules for the 'contacts' collection (demo enquiries).
    match /contacts/{contactId} {
      // Anyone can create a contact request (from the public website form).
      allow create: if true;
      // Only platform administrators can read the list of contacts.
      allow read, update, delete: if isSignedIn() && isPlatformAdmin();
    }
  }
}
