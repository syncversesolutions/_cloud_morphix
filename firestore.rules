
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access to prevent unauthorized reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // PUBLIC ACCESS: Allow anyone to create a contact form submission.
    // Platform admins are the only ones who can read this data.
    match /contacts/{contactId} {
      allow create: if request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.companyName is string;
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // USER LOOKUP: Maps a user's UID to their company ID.
    match /user_company_lookup/{userId} {
      // A user can read their own lookup document.
      allow get: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation for:
      // 1. A new user creating their own record during registration.
      // 2. An existing admin with 'manage_users' permission creating a record for a new user.
      allow create: if (request.auth != null && request.auth.uid == userId) ||
                       (
                         request.auth != null &&
                         exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                         'manage_users' in get(/databases/$(database)/documents/companies/$(request.resource.data.companyId)/users/$(request.auth.uid)).data.allowed_actions
                       );
    }

    // COMPANIES: Main collection for all company data and subcollections.
    match /companies/{companyId} {

      // A user can read their own company's document, or a platform admin can read any.
      allow get: if (
                      request.auth != null &&
                      exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId
                   ) || (
                      request.auth != null &&
                      exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true
                   );
                   
      // Only platform admins can list all companies.
      allow list: if request.auth != null &&
                     exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;

      // Any authenticated user can create a company (this is part of the registration flow).
      allow create: if request.auth != null;

      // Only company admins with 'manage_roles' permission can update company details.
      allow update: if request.auth != null &&
                       exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                       'manage_roles' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions;


      // USERS Subcollection
      match /users/{userId} {
        // Allow reads for the user themselves or an admin with 'manage_users' permission.
        allow get: if (request.auth != null && request.auth.uid == userId) ||
                      (
                        request.auth != null &&
                        exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                        'manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions
                      );
                      
        // Allow list for admins with 'manage_users' permission.
        allow list: if request.auth != null &&
                     exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                     'manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions;

        // Allow user creation for the user themselves (registration) or by an admin.
        allow create: if (request.auth != null && request.auth.uid == userId) ||
                         (
                           request.auth != null &&
                           exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                           'manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions
                         );
                         
        // Allow updates by the user themselves or by an admin.
        allow update: if (request.auth != null && request.auth.uid == userId) ||
                         (
                           request.auth != null &&
                           exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                           'manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions
                         );
                         
        // Allow deletion only by an admin.
        allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                       'manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions;
      }

      // ROLES Subcollection
      match /roles/{roleId} {
        // Any member of the company can read the roles.
        allow get, list: if request.auth != null &&
                           exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
                           
        // Allow creating roles if:
        // 1. The user is an admin with 'manage_roles' permission.
        // 2. It's one of the default roles being created during company registration.
        allow create: if (
                          request.auth != null &&
                          request.resource.data.role_name in ['Admin', 'Viewer', 'Analyst']
                        ) || (
                          request.auth != null &&
                          exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                          'manage_roles' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions
                        );

        // Only admins with 'manage_roles' can update or delete.
        allow update, delete: if request.auth != null &&
                                exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                                get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                                'manage_roles' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions;
      }

      // AUDIT LOGS Subcollection
      match /audit_logs/{logId} {
        // Admins can read and create audit logs.
        allow get, list, create: if request.auth != null &&
                                    exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
                                    get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId &&
                                    ('manage_users' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions || 'manage_roles' in get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.allowed_actions);
      }
    }
  }
}
    