rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // This function can be used ONLY after checking that the user's lookup document exists.
    function getUserCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    // This function checks if a user belongs to a company and that their user document exists within that company.
    function isExistingUserInCompany(userId, companyId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
             exists(/databases/$(database)/documents/user_company_lookup/$(userId)) &&
             getUserCompanyId(userId) == companyId;
    }

    // This function checks if an existing user has a specific permission for a given company.
    // It requires that the user, role, and lookup documents all exist.
    function userHasPermission(userId, companyId, permission) {
      let userRole = get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
      return exists(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRole)) &&
             permission in get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRole)).data.allowed_actions;
    }

    // This function checks if the requesting user is a platform administrator.
    function isPlatformAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // --- Rules Start Here ---

    // 1. PUBLIC CONTACT FORM
    // Allow anyone to create (submit) a contact form. Only platform admins can read them.
    match /contacts/{contactId} {
      allow create: if true;
      allow read, list: if isPlatformAdmin();
      allow update, delete: if false;
    }

    // 2. USER-COMPANY LOOKUP TABLE
    // This table maps a user's UID to their company's ID.
    match /user_company_lookup/{userId} {
      // Allow reading your own lookup document.
      allow get: if isAuthenticated() && request.auth.uid == userId;

      // Allow creating a lookup document in two cases:
      // 1. A new user is creating their own during registration.
      // 2. An existing company admin is creating one for a new user they are inviting.
      allow create: if isAuthenticated() && (
        (request.auth.uid == userId) ||
        (userHasPermission(request.auth.uid, request.resource.data.companyId, 'manage_users'))
      );

      // No listing, and updates/deletes are handled by user management logic (removing a user).
      allow list, update, delete: if false;
    }

    //3. COMPANIES & ALL SUBCOLLECTIONS
    match /companies/{companyId} {
      // Allow reading company details if you are an existing user in that company, or a platform admin.
      allow get: if (isAuthenticated() && isExistingUserInCompany(request.auth.uid, companyId)) || isPlatformAdmin();
      // Allow listing all companies ONLY for platform admins.
      allow list: if isPlatformAdmin();
      // Allow creating a company document only if authenticated (this is the first step of registration).
      allow create: if isAuthenticated() && isPlatformAdmin();  // yaha pr change
      // No updates or deletes from the client for now.
      allow update, delete: if false;


      // USERS Subcollection
      match /users/{userId} {
        // Allow reading your own profile, or any profile in your company if you have permission.
        allow get: if (isAuthenticated() && request.auth.uid == userId) ||
                    (isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_users'));

        // Allow listing users only if you have permission.
        allow list: if isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_users');

        // Allow creating a user profile in two cases:
        // 1. A new user is creating their own profile during registration (and it MUST be an 'Admin' role).
        // 2. An existing admin is creating a new user profile for someone else.
        allow create: if isAuthenticated() && (
          (request.auth.uid == userId && request.resource.data.role == 'Admin') ||
          (userHasPermission(request.auth.uid, companyId, 'manage_users'))
        );

        // Allow updating your own profile, or any profile if you have permission.
        allow update: if (isAuthenticated() && request.auth.uid == userId) ||
                       (isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_users'));

        // Allow deleting users only if you have permission.
        allow delete: if isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_users');
      }

      // ROLES Subcollection
      match /roles/{roleId} {
        // Allow any user in the company to read the available roles.
        allow get, list: if isAuthenticated() && isExistingUserInCompany(request.auth.uid, companyId);

        // Allow creating roles in two cases:
        // 1. A new user is creating the default roles ('Admin', 'Viewer', 'Analyst') during registration.
        //    This is checked by verifying the user does NOT have a profile yet in this company.
        // 2. An existing admin is creating a new custom role.
        allow create: if isAuthenticated() && (
          (!exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
            (request.resource.data.role_name == 'Admin' || request.resource.data.role_name == 'Viewer' || request.resource.data.role_name == 'Analyst')) ||
          (userHasPermission(request.auth.uid, companyId, 'manage_roles'))
        );

        // Allow updating or deleting roles only if you have permission.
        allow update, delete: if isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_roles');
      }

      // AUDIT LOGS Subcollection
      match /audit_logs/{logId} {
          allow read, list, create: if isAuthenticated() && userHasPermission(request.auth.uid, companyId, 'manage_users');
          allow update, delete: if false;
      }
    }
  }
}
