
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // HELPER FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserCompanyId() {
      return getUserData().company.id;
    }
    
    function isUserAdmin() {
      return getUserData().company.role == 'Admin';
    }

    function isUserInCompany(companyId) {
      return isUserAuthenticated() && getUserCompanyId() == companyId;
    }

    // USERS COLLECTION
    match /users/{userId} {
      allow create: if isUserAuthenticated();
      
      // CORRECTED RULE: A user can read their own profile. An admin can read profiles of all users in their own company.
      // This structure works correctly with collection queries.
      allow read: if isUserProfileOwner(userId) || (isUserAdmin() && resource.data.company.id == getUserCompanyId());
      
      // CORRECTED RULE: A user can only update their own 'profile'. An admin can only update the 'company' info (e.g., role) of a user in their company.
      // The diff() method ensures only specific parts of the document are changed.
      allow update: if (isUserProfileOwner(userId) && request.resource.data.diff(resource.data).affectedKeys.hasOnly('profile'))
                   || (isUserAdmin() && resource.data.company.id == getUserCompanyId() && request.resource.data.diff(resource.data).affectedKeys.hasOnly('company'));

      // Only an admin can remove a user from their own company.
      allow delete: if isUserAdmin() && resource.data.company.id == getUserCompanyId();
    }

    // COMPANIES COLLECTION
    match /companies/{companyId} {
      allow create: if isUserAuthenticated();
      allow read: if isUserInCompany(companyId);
      allow update: if isUserAdmin() && isUserInCompany(companyId);
      allow delete: if false; // Deleting a company should be a backend process.

      // SUBCOLLECTIONS
      
      match /invites/{inviteId} {
          // Admins can read all invites. Unauthenticated users can read a pending invite to accept it.
          allow read: if (isUserAdmin() && isUserInCompany(companyId)) || resource.data.status == 'pending';
          allow create: if isUserAdmin() && isUserInCompany(companyId);
          allow update: if request.resource.data.status == 'accepted'; // Allows a user to accept an invite.
      }
      
      match /audit_logs/{logId} {
        allow read: if isUserAdmin() && isUserInCompany(companyId);
        allow write: if false; // Logs are written by backend functions only.
      }
    }
  }
}
