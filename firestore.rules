rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get a user's company ID from their user profile.
    function getCompanyId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.company.id;
    }
    
    // Helper function to check if a user is an Admin.
    function isUserAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.company.role == 'Admin';
    }

    // Rules for the USERS collection
    match /users/{userId} {
      // A user can create their own document upon signup.
      allow create: if request.auth.uid == userId;

      // A user can get, update, or delete their own profile.
      allow get, update, delete: if request.auth.uid == userId;

      // An admin can get another user's profile IF they are in the same company.
      allow get: if isUserAdmin(request.auth.uid) && getCompanyId(request.auth.uid) == getCompanyId(userId);

      // An admin can update another user's role IF they are in the same company.
      allow update: if isUserAdmin(request.auth.uid) && getCompanyId(request.auth.uid) == getCompanyId(userId) && request.resource.data.keys().hasOnly(['company']);

      // An admin can list all users that belong to their company.
      // This rule is checked against the query itself, not individual documents.
      allow list: if isUserAdmin(request.auth.uid) && request.query.resource.data.company.id == getCompanyId(request.auth.uid);
    }

    // Rules for the COMPANIES collection and its subcollections
    match /companies/{companyId} {
      // Any authenticated user can create a new company.
      allow create: if request.auth != null;

      // Allow a user to read/write to a company and its subcollections (like invites)
      // IF they belong to that company. This is a simple, powerful rule.
      allow read, write: if request.auth != null && getCompanyId(request.auth.uid) == companyId;
      
      // Specifically deny clients from writing to audit logs.
      // This overrides the broad 'write' permission above for this specific path.
      match /audit_logs/{logId} {
        allow write: if false;
      }
    }
  }
}
