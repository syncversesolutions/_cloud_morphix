
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isNewUserRegistration() {
      // A user is "new" if they are signed in, but their lookup document does not exist yet.
      // This is the key to allowing the initial batch write for company/user creation.
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }

    function getUserCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }

    function getUserRole() {
      let companyId = getUserCompanyId();
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
    }
    
    function getUserPermissions() {
        let companyId = getUserCompanyId();
        let roleName = getUserRole();
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }
    
    function hasPermission(permission) {
        return permission in getUserPermissions();
    }
    
    // --- Rules for Contacts Collection ---
    // Allow anyone to submit the contact form.
    match /contacts/{contactId} {
      allow read: if false; // No one should read contact forms from the client.
      allow write: if true; // Allow public write access for the contact form.
    }

    // --- Rules for Companies Collection ---
    match /companies/{companyId} {
      allow read: if isSignedIn() && getUserCompanyId() == companyId;
      
      // Allow creation only as part of the initial user registration flow.
      allow create: if isNewUserRegistration();
      
      allow update: if false; // Companies cannot be updated from the client.
      allow delete: if false; // Companies cannot be deleted from the client.

      // --- Rules for Users Sub-collection ---
      match /users/{userId} {
        allow read: if isSignedIn() && getUserCompanyId() == companyId;
        
        // Allow a new user to create their own user document during registration.
        // Allow users with 'manage_users' permission to create other users.
        allow create: if (isNewUserRegistration() && request.auth.uid == userId) ||
                        (isSignedIn() && hasPermission('manage_users'));
        
        // Allow a user to update ONLY their own fullName.
        // Allow a user with 'manage_users' permission to update ONLY another user's role.
        allow update: if isSignedIn() && (
            (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
            (hasPermission('manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']))
          );
          
        // Allow admins to remove users, but not themselves.
        allow delete: if isSignedIn() && hasPermission('manage_users') && request.auth.uid != userId;
      }
      
      // --- Rules for Roles Sub-collection ---
      match /roles/{roleId} {
        allow read: if isSignedIn() && getUserCompanyId() == companyId;
        
        // Only users with 'manage_roles' permission can create/update roles.
        // Admin role cannot be modified.
        allow write: if isSignedIn() && hasPermission('manage_roles') && resource.data.role_name != 'Admin';
      }
      
      // --- Rules for Audit Logs Sub-collection ---
      match /audit_logs/{logId} {
        // Only allow backend services to write. Deny all client access.
        allow read, write: if false;
      }
    }

    // --- Rules for Lookup Collection ---
    match /user_company_lookup/{userId} {
       // Allow a user to create their own lookup document during registration.
      allow create: if isNewUserRegistration() && request.auth.uid == userId;
      
      // No one can read or update their lookup doc after creation.
      allow read, update: if false;
      
      // A user with 'manage_users' permission can delete another user's lookup doc.
      allow delete: if isSignedIn() && hasPermission('manage_users') && request.auth.uid != userId;
    }
  }
}
