
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user is a member of a given company.
    function isCompanyMember(companyId) {
      return isSignedIn() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
             && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    // Gets the role name (e.g., "Admin") for the requesting user.
    function getUserRole(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
    }

    // Gets the list of allowed actions for a specific role.
    function getRolePermissions(companyId, roleName) {
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    // Checks if the requesting user has a specific permission (e.g., "manage_users").
    function hasPermission(companyId, permission) {
      return isCompanyMember(companyId) && permission in getRolePermissions(companyId, getUserRole(companyId));
    }
    
    // Checks if the user is creating their own account for the very first time.
    function isNewUserRegistration(userId) {
      return isSignedIn() && request.auth.uid == userId && !exists(/databases/$(database)/documents/user_company_lookup/$(userId));
    }

    // --- Collection Rules ---

    // Maps a user's UID to their company ID.
    match /user_company_lookup/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      // Allow creation only if the user is new. This is key for the registration batch.
      allow create: if isNewUserRegistration(userId);
      allow update, delete: if false;
    }
    
    // Public contact form submissions.
    match /contacts/{contactId} {
      // Platform Admins read this via a secured backend function. Allow any authenticated user to read.
      allow read: if isSignedIn();
      // Anyone can submit the contact form.
      allow create: if true;
      allow update, delete: if false;
    }

    match /companies/{companyId} {
      allow read: if isCompanyMember(companyId);
      // Allow a user to create a company document only during their initial registration.
      allow create: if isNewUserRegistration(request.auth.uid);
      allow update, delete: if false;

      match /users/{userId} {
        allow read: if isCompanyMember(companyId);

        // Allow user creation if:
        // 1. A new user is creating their own profile.
        // 2. An admin is creating a new user.
        allow create: if isNewUserRegistration(userId) || hasPermission(companyId, 'manage_users');
        
        // Allow updates if:
        // 1. A user is changing their own 'fullName'.
        // 2. An admin with permission is changing another user's 'role'.
        allow update: if (isSignedIn() && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
                    || (hasPermission(companyId, 'manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));

        allow delete: if hasPermission(companyId, 'manage_users');
      }

      match /roles/{roleId} {
        allow read: if isCompanyMember(companyId);
        allow create, update: if hasPermission(companyId, 'manage_roles');
        allow delete: if false;
      }
      
      match /audit_logs/{logId} {
        allow read: if hasPermission(companyId, 'manage_roles') || getUserRole(companyId) == 'Admin';
        allow create: if isCompanyMember(companyId);
        allow update, delete: if false;
      }
    }
  }
}
