
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Is the user authenticated?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Is the authenticated user the owner of the document?
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Is the user a member of the specified company?
    // NOTE: This can only be used in contexts where the user is already registered.
    function isMemberOf(companyId) {
        // First check if the lookup document exists before trying to access its data.
        return isAuthenticated() 
               && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
               && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }
    
    // Is the user a platform administrator?
    // NOTE: This can only be used in contexts where the user is already registered.
    function isPlatformAdmin() {
        return isAuthenticated()
               && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
               && get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }
    
    // Does the user have a specific permission via their assigned role?
    // NOTE: This can only be used in contexts where the user is already registered.
    function hasPermission(companyId, permission) {
        let userDocData = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data;
        let roleName = userDocData.role;
        let rolePermissions = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
        return isAuthenticated() && rolePermissions[permission] == true;
    }


    // --- Collection Rules ---

    // Public contact form submissions. Anyone can create.
    match /contacts/{contactId} {
      allow create: if true;
      // Only platform admins can read contact submissions.
      allow read, list: if isPlatformAdmin();
    }
    
    // Maps a user's UID to their company's ID.
    match /user_company_lookup/{userId} {
      // Users can create their own lookup entry only if it doesn't already exist. This is the core of the registration fix.
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/user_company_lookup/$(userId));
      // Users can read their own entry. Platform admins can read any.
      allow read: if isOwner(userId) || isPlatformAdmin();
      // An admin with 'manage_users' can delete a lookup entry when removing a user.
      allow delete: if hasPermission(resource.data.companyId, 'manage_users');
    }
    
    match /companies/{companyId} {
      // Allow company document creation only if the user is performing their initial registration.
      allow create: if request.auth.uid != null && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));

      // Members can read their own company document. Platform admins can read any.
      allow read: if isMemberOf(companyId) || isPlatformAdmin();
      // Only platform admins can list all companies.
      allow list: if isPlatformAdmin();
      
      // No client-side updates to the main company document for security.
      allow update, delete: if false;

      // --- Sub-collections ---
      
      match /users/{userId} {
        // A user document can be created under two conditions:
        // 1. A new user is registering themselves.
        // 2. An existing admin with 'manage_users' permission is inviting a new user.
        allow create: if (isOwner(userId) && !exists(/databases/$(database)/documents/user_company_lookup/$(userId))) 
                        || hasPermission(companyId, 'manage_users');
        
        allow read, list: if isMemberOf(companyId);

        // A user document can be updated under two conditions:
        // 1. A user is updating ONLY their own 'fullName'.
        // 2. An admin with 'manage_users' is updating ONLY another user's 'role'.
        allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
                      || (hasPermission(companyId, 'manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
                      
        // Admins can delete other users, but not themselves.
        allow delete: if hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
      }
      
      match /roles/{roleName} {
        // Roles can be created under two conditions:
        // 1. During initial company registration (for default roles).
        // 2. By an admin with 'manage_roles' permission.
        allow create: if (!exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)))
                        || hasPermission(companyId, 'manage_roles');
                        
        allow read: if isMemberOf(companyId);
        
        // Only admins with 'manage_roles' permission can update roles.
        allow update: if hasPermission(companyId, 'manage_roles');
      }
      
      match /audit_logs/{logId} {
        // Only members of the company can create or read audit logs.
        allow create, read: if isMemberOf(companyId);
      }
    }
  }
}
