rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user exists and is an admin of a company.
    function isCompanyAdmin(companyId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             userDoc.data.company_id == companyId &&
             userDoc.data.role == "Admin";
    }
    
    // Helper function to check if a user is a member of a company.
    function isCompanyMember(companyId) {
      // This check is for authenticated users who are part of a company.
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.company_id == companyId;
    }

    match /companies/{companyId} {
      // Allow unauthenticated users (for invites) or company members to read company data.
      allow get: if isCompanyMember(companyId) || request.auth == null;
      
      // Allow authenticated users to create a company.
      allow create: if request.auth != null &&
                       request.resource.data.company_id == companyId;
                       
      // Allow company admins to update their own company document.
      allow update: if isCompanyAdmin(companyId);

      // --- Sub-collections ---
      match /roles/{roleId} {
        // Admins can manage roles.
        allow get, list, create: if isCompanyAdmin(companyId);
      }

      match /invites/{inviteId} {
        // Anyone with the link can read the invite details to register.
        allow get: if request.auth == null;
        // Admins can create and list invites.
        allow create, list: if isCompanyAdmin(companyId);
        // The invited user can update the invite to accept it.
        allow update: if request.auth != null &&
                         request.resource.data.status == "accepted" &&
                         resource.data.status == "pending" &&
                         request.resource.data.accepted_by_uid == request.auth.uid;
      }
    }

    match /users/{userId} {
      // A user can read their own profile.
      allow get: if request.auth != null && request.auth.uid == userId;

      // An admin can list all users in their company.
      allow list: if request.auth != null &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";

      // A user can update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow user creation during signup or invite acceptance.
      allow create: if request.auth != null && request.auth.uid == userId;
    }
  }
}
