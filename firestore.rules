rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isUserAuthenticated() { return request.auth != null; }
    function isUserProfileOwner(userId) { return request.auth.uid == userId; }
    function getUserData() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data; }
    function getUserCompanyId() { return getUserData().company.id; }
    function isUserAdmin() { return getUserData().company.role == 'Admin'; }
    function isUserInCompany(companyId) { return isUserAuthenticated() && getUserCompanyId() == companyId; }

    match /users/{userId} {
      allow create: if isUserAuthenticated();
      
      // CORRECTED: This rule now properly allows an admin to list all users in their company.
      allow read: if isUserProfileOwner(userId) || (isUserAdmin() && resource.data.company.id == getUserCompanyId());
      
      allow update: if (isUserProfileOwner(userId) && request.resource.data.keys().hasOnly(['profile']))
                   || (isUserAdmin() && isUserInCompany(get(/databases/$(database)/documents/users/$(userId)).data.company.id) && request.resource.data.keys().hasOnly(['company']));
                   
      allow delete: if isUserAdmin() && isUserInCompany(get(/databases/$(database)/documents/users/$(userId)).data.company.id);
    }

    match /companies/{companyId} {
      allow create: if isUserAuthenticated();
      allow read: if isUserInCompany(companyId);
      allow update: if isUserAdmin() && isUserInCompany(companyId);
      allow delete: if false;

      // SUBCOLLECTIONS
      match /invites/{inviteId} {
          // CORRECTED: Allows admins to read all invites, not just pending ones.
          allow read: if (isUserAdmin() && isUserInCompany(companyId)) || resource.data.status == 'pending';
          allow create: if isUserAdmin() && isUserInCompany(companyId);
          allow update: if request.resource.data.status == 'accepted';
      }
      
      match /audit_logs/{logId} {
        allow read: if isUserAdmin() && isUserInCompany(companyId);
        allow write: if false;
      }
    }
  }
}
