rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the requesting user belongs to the specified company.
    function isUserInCompany(companyId) {
      let lookupDoc = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
      return lookupDoc.exists && lookupDoc.data.companyId == companyId;
    }

    // Retrieves the permissions for the requesting user based on their role.
    function getRolePermissions(companyId) {
        let userProfile = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid));
        if (!userProfile.exists) {
          return [];
        }
        let roleName = userProfile.data.role;
        let roleDoc = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName));
        if (!roleDoc.exists) {
          return [];
        }
        return roleDoc.data.allowed_actions;
    }
    
    function isPlatformAdmin() {
        // Ensure the user has a lookup entry first.
        let lookupDoc = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
        if (!lookupDoc.exists) {
          return false;
        }
        let userCompanyId = lookupDoc.data.companyId;
        
        // Fetch company and user profile documents.
        let companyDoc = get(/databases/$(database)/documents/companies/$(userCompanyId));
        let userProfile = get(/databases/$(database)/documents/companies/$(userCompanyId)/users/$(request.auth.uid));

        // Check for existence of all documents before accessing data.
        return companyDoc.exists && userProfile.exists &&
               companyDoc.data.company_name == 'Cloud Morphix' && 
               userProfile.data.role == 'Admin';
    }

    // --- Company Rules ---
    match /companies/{companyId} {
      // Allow creation during registration. The user must be authenticated.
      // Further checks are on the sub-collections created in the same batch.
      allow create: if request.auth.uid != null;

      // Allow reads if the user is part of the company.
      allow read: if isUserInCompany(companyId);

      // Disallow client-side updates/deletes to the main company document.
      allow update, delete: if false;

      // --- User Rules ---
      match /users/{userId} {
        // Allow creating a user profile IF it's the user's own profile AND it's for the initial 'Admin' user.
        allow create: if request.auth.uid == userId && request.resource.data.role == 'Admin';

        // Allow reads if the user is part of the company.
        allow read: if isUserInCompany(companyId);

        // Allow updates:
        // 1. A user can update their own 'fullName'.
        // 2. An admin can update another user's 'role'.
        // 3. Any authenticated user in the company can update the dashboardUrl.
        allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                       ('manage_users' in getRolePermissions(companyId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])) ||
                       (isUserInCompany(companyId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dashboardUrl']));

        // Allow deletion if the user has 'manage_users' permission.
        allow delete: if 'manage_users' in getRolePermissions(companyId);
      }

      // --- Role Rules ---
      match /roles/{roleId} {
        // Allow creation of default roles during registration OR by an admin with 'manage_roles' permission.
        allow create: if (roleId in ['Admin', 'Viewer', 'Analyst']) || ('manage_roles' in getRolePermissions(companyId));
        
        // Allow reads if the user is part of the company.
        allow read: if isUserInCompany(companyId);
        
        // Disallow client-side updates/deletes.
        allow update, delete: if false;
      }

      // --- Audit Log Rules ---
      match /audit_logs/{logId} {
        // Creation is handled by secure backend logic.
        allow create: if isUserInCompany(companyId);
        allow read: if isPlatformAdmin() || 'manage_users' in getRolePermissions(companyId);
        allow update, delete: if false;
      }
    }

    // --- User-Company Lookup Rules ---
    match /user_company_lookup/{userId} {
      // Allow user to create their own lookup doc.
      allow create: if request.auth.uid == userId;
      // Allow user to read their own lookup doc.
      allow read: if request.auth.uid == userId;
      // Disallow updates/deletes from client.
      allow update, delete: if false;
    }
    
    // --- Contacts Rules ---
    match /contacts/{contactId} {
      // Allow anyone to create a contact message.
      allow create: if true;
      // Only allow platform admins to read contact messages.
      allow read, list: if isPlatformAdmin();
      // Disallow updates/deletes from client.
      allow update, delete: if false;
    }
  }
}
