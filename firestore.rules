rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Checks if a user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if this is a user's first registration by seeing if their lookup doc exists.
    function isNewUserRegistration() {
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }

    // Gets the company ID for a given user from the lookup table.
    function getCompanyIdForUser(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    // Gets the role name for a given user.
    function getUserRole(userId) {
      let companyId = getCompanyIdForUser(userId);
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
    }

    // Checks if the requesting user has a specific permission.
    function hasPermission(permission) {
      if (!isSignedIn()) { return false; }
      let companyId = getCompanyIdForUser(request.auth.uid);
      let roleName = getUserRole(request.auth.uid);
      let rolePermissions = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
      return permission in rolePermissions;
    }

    // Checks if the requesting user is a platform administrator.
    function isPlatformAdmin() {
      if (!isSignedIn()) { return false; }
      let companyId = getCompanyIdForUser(request.auth.uid);
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      let userRole = getUserRole(request.auth.uid);
      return companyName == "Cloud Morphix" && userRole == "Admin";
    }

    // --- Collection Rules ---

    match /companies/{companyId} {
      // Create: Allow a company doc to be created ONLY during a new user's registration.
      allow create: if isNewUserRegistration();
      
      // Read: Allow if the user belongs to this company.
      allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;
      
      // Update/Delete: Not allowed on the main company doc.
      allow update, delete: if false;

      // User profiles subcollection
      match /users/{userId} {
        // Create: Allow if a new user is creating their OWN profile OR an admin is creating a new user.
        allow create: if (isNewUserRegistration() && request.auth.uid == userId) || (hasPermission('manage_users'));
        
        // Read: Allow if the user is in the same company.
        allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;

        // Update: Allow ONLY for specific, controlled field updates.
        allow update: if isSignedIn() && (
          // A user can update their own fullName.
          (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
          // An admin can update another user's role.
          (hasPermission('manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])) ||
          // An ETL process can update only the dashboardUrl.
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dashboardUrl']))
        );

        // Delete: Allow only if user has permission.
        allow delete: if hasPermission('manage_users');
      }

      // Roles subcollection
      match /roles/{roleName} {
        // Create: Allow during registration or if user has permission.
        allow create: if isNewUserRegistration() || hasPermission('manage_roles');
        
        // Read: Allow if user is in the same company.
        allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;
        
        // Update: Allow if user has permission.
        allow update: if hasPermission('manage_roles');

        // Delete: Allow if user has permission and it's not the main Admin role.
        allow delete: if hasPermission('manage_roles') && roleName != 'Admin';
      }
    }

    // User-to-company lookup table
    match /user_company_lookup/{userId} {
      // Create: Allow if a new user is creating their own lookup doc.
      allow create: if isNewUserRegistration() && request.auth.uid == userId;

      // Read: A user can only read their own lookup doc.
      allow read: if isSignedIn() && request.auth.uid == userId;
      
      // Update: Not allowed.
      allow update: if false;

      // Delete: Allow if user has permission to manage users.
      allow delete: if hasPermission('manage_users');
    }

    // Contact form submissions
    match /contacts/{contactId} {
      // Create: Anyone can submit the form.
      allow create: if true;

      // Read: Only platform admins can see submissions.
      allow read: if isPlatformAdmin();
      
      // Update/Delete: Not allowed.
      allow update, delete: if false;
    }
  }
}
