rules_version = '2';

service cloud.firestore {
  database /{database}/documents {
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A user is registering if their company lookup document does not yet exist.
    // This is the key to allowing the initial batch write for company setup.
    function isRegistration() {
      return !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }

    function getCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }

    // Checks if the requesting user belongs to the company specified by companyId.
    function isMemberOf(companyId) {
      return isSignedIn() && getCompanyId() == companyId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/companies/$(getCompanyId())/users/$(request.auth.uid)).data.role;
    }

    function hasPermission(permission) {
      // Get the permissions map from the user's role document and check if the permission is true.
      return get(/databases/$(database)/documents/companies/$(getCompanyId())/roles/$(getRole())).data.allowed_actions[permission] == true;
    }

    function isPlatformAdmin() {
        // A user is platform admin if their user document has the isPlatformAdmin flag set to true.
        // This check first verifies the user belongs to a company, then safely reads the user document.
        return isMemberOf(getCompanyId()) && get(/databases/$(database)/documents/companies/$(getCompanyId())/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // --- Rules ---
    match /companies/{companyId} {
      allow read: if isMemberOf(companyId);
      allow create: if isRegistration();

      match /users/{userId} {
        allow read: if isMemberOf(companyId);

        // Allow creation if the requester has 'manage_users' permission,
        // OR if it's a new user creating their own account during registration.
        allow create: if hasPermission('manage_users') || (isRegistration() && isOwner(userId));

        // A user can update their own name.
        // An admin with 'manage_users' can update another user's role.
        allow update: if (isOwner(userId) && request.resource.data.keys().hasOnly(['fullName']))
                   || (hasPermission('manage_users') && request.resource.data.keys().hasOnly(['role']));
        
        allow delete: if hasPermission('manage_users');
      }

      match /roles/{roleId} {
        allow read: if isMemberOf(companyId);
        
        // Allow writing roles if the requester has 'manage_roles' permission,
        // OR if it's part of the initial company registration.
        allow write: if hasPermission('manage_roles') || isRegistration();
      }
      
      match /audit_logs/{logId} {
        // Only backend services can write audit logs. No client access.
        allow read, write: if false; 
      }
    }

    match /user_company_lookup/{userId} {
      allow read: if isOwner(userId);
      // Allow creation only during the registration process.
      allow create: if isOwner(userId) && isRegistration();
    }

    match /contacts/{contactId} {
      allow create: if true; // Anyone can submit the form.
      allow read: if isPlatformAdmin(); // Only platform admins can read enquiries.
      allow write, delete: if false;
    }
  }
}
