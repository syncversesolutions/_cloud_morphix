rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check if a user is an admin of a specific company.
    function isCompanyAdmin(companyId) {
      // Ensure the user is authenticated before trying to access their profile.
      if (request.auth == null) {
        return false;
      }
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.company_id == companyId &&
             userProfile.role == 'Admin';
    }

    // Helper to check if the currently authenticated user is an Admin in their own company.
    function isOwnCompanyAdmin() {
      // Ensure the user is authenticated.
      if (request.auth == null) {
        return false;
      }
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.role == 'Admin';
    }

    match /companies/{companyId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if isCompanyAdmin(companyId);

      match /roles/{roleId} {
        // An admin of a company can read and create roles for that company.
        allow read, create: if isCompanyAdmin(companyId);
      }
    }

    match /users/{userId} {
      // A user can create, read, and update their own document.
      allow create, get, update: if request.auth.uid == userId;

      // An admin can GET a user document if that user is in their company.
      // This rule uses `resource.data` which is available for `get` operations.
      allow get: if isCompanyAdmin(resource.data.company_id);

      // An admin can LIST users. The query from the app MUST include a
      // `where("company_id", "==", companyId)` clause. Firestore will then
      // enforce the `get` rule above on each document, ensuring security.
      allow list: if isOwnCompanyAdmin();
    }

    match /invites/{inviteId} {
      // An admin can create an invite for their own company.
      // This uses `request.resource.data` which is correct for `create`.
      allow create: if isCompanyAdmin(request.resource.data.company_id);

      // An admin can GET a single invite if it belongs to their company.
      allow get: if isCompanyAdmin(resource.data.company_id);

      // An admin can LIST invites. The same logic as listing users applies.
      // The client MUST filter by the admin's company_id.
      allow list: if isOwnCompanyAdmin();
    }
  }
}
