rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCompanyMember(companyId) {
      return exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    function hasPermission(companyId, permission) {
      let userRoleName = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
      let roleDoc = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRoleName));
      return roleDoc.exists && permission in roleDoc.data.allowed_actions;
    }
    
    function isPlatformAdmin() {
        let lookup = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
        if (!lookup.exists) {
            return false;
        }
        let companyId = lookup.data.companyId;
        let companyDoc = get(/databases/$(database)/documents/companies/$(companyId));
        let userProfile = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid));

        return companyDoc.exists && userProfile.exists && 
               companyDoc.data.company_name == "Cloud Morphix" && 
               userProfile.data.role == "Admin";
    }

    // --- Top-Level Collections ---

    match /user_company_lookup/{userId} {
      allow read: if isOwner(userId);
      // Allow creation if a user is signing up (isOwner) OR an admin is adding a user.
      // The `hasPermission` check will fail during initial signup, but `isOwner` will pass.
      allow create: if isOwner(userId) || hasPermission(request.resource.data.companyId, 'manage_users');
      allow update, delete: if false;
    }

    match /contacts/{contactId} {
      allow create: if true;
      allow read: if isPlatformAdmin();
      allow write: if false; // Disallow updates/deletes
    }
    
    match /companies/{companyId} {
      // Allow an authenticated user to create a company document.
      // The rest of the batch write is validated by the rules below.
      allow create: if request.auth.uid != null;
      allow read: if isCompanyMember(companyId);
      allow update, delete: if false; // Company-level fields should not be changed from the client.

      // --- Sub-Collections ---

      match /audit_logs/{logId} {
        allow read: if isCompanyMember(companyId);
        allow write: if false; // Append-only by backend services
      }
      
      match /roles/{roleName} {
        allow read: if isCompanyMember(companyId);
        
        // Allow role creation IF the company doc doesn't exist yet (this handles the initial registration batch)
        // OR if the user has 'manage_roles' permission.
        allow create: if !exists(/databases/$(database)/documents/companies/$(companyId)) || hasPermission(companyId, 'manage_roles');
        
        allow update: if hasPermission(companyId, 'manage_roles') && roleName != 'Admin';
        allow delete: if false; // To prevent accidentally breaking users
      }
      
      match /users/{userId} {
        allow read: if isCompanyMember(companyId);
        
        // Allow user creation IF it's the user creating their own profile (initial admin)
        // OR if an admin with 'manage_users' permission is creating a new user.
        allow create: if isOwner(userId) || hasPermission(companyId, 'manage_users');
        
        // Allow a user to update their own profile, or an admin to update others.
        // Front-end logic restricts which fields are actually sent.
        allow update: if isOwner(userId) || hasPermission(companyId, 'manage_users');

        allow delete: if hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
      }
    }
  }
}
