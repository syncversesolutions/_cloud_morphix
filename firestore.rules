rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function userCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function userDocExists(userId) {
      return exists(/databases/$(database)/documents/user_company_lookup/$(userId));
    }
    
    function isPlatformAdmin() {
      // User must exist and have a company lookup before we can check anything.
      return userDocExists(request.auth.uid) &&
             (
                // New way: check the isPlatformAdmin flag
                get(/databases/$(database)/documents/companies/$(userCompanyId(request.auth.uid))/users/$(request.auth.uid)).data.isPlatformAdmin == true ||
                // Old way: check company name for backward compatibility
                get(/databases/$(database)/documents/companies/$(userCompanyId(request.auth.uid))).data.company_name in ["Cloud Morphix", "loud morphix"]
             );
    }
    
    function hasPermission(companyId, userId, permission) {
        // A user cannot have permissions if their document doesn't exist. This short-circuits to prevent errors.
        let userDocPath = /databases/$(database)/documents/companies/$(companyId)/users/$(userId);
        return exists(userDocPath) &&
               get(/databases/$(database)/documents/companies/$(companyId)/roles/$(get(userDocPath).data.role)).data.allowed_actions[permission] == true;
    }

    // --- Default Deny ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Public Contact Form ---
    match /contacts/{contactId} {
      allow read, update, delete: if false;
      allow create: if request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.companyName is string;
    }

    // --- Company & User Rules ---
    match /companies/{companyId} {
        // Allow creation only if the user is new (part of the registration batch write)
        allow create: if !userDocExists(request.auth.uid);
        
        // Allow a user to read their own company document.
        allow read: if isAuth() && userCompanyId(request.auth.uid) == companyId;
        
        // Allow platform admins to see a list of all companies.
        allow list: if isPlatformAdmin();
        
        // --- User Profiles ---
        match /users/{userId} {
            // This is the corrected rule for user creation.
            // It allows creation IF:
            // 1. It's a new user registering themselves (isUser(userId) is true).
            // OR
            // 2. An admin with 'manage_users' permission is creating another user (!isUser(userId) is true).
            // This structure prevents the hasPermission check from running (and failing) during self-registration.
            allow create: if (isUser(userId) && !userDocExists(request.auth.uid)) ||
                             (!isUser(userId) && hasPermission(companyId, request.auth.uid, 'manage_users'));

            // A user can read/update their own profile, OR an admin can manage any profile.
            allow read, update: if isUser(userId) || hasPermission(companyId, request.auth.uid, 'manage_users');
            
            // An admin can delete a user, but not themselves.
            allow delete: if hasPermission(companyId, request.auth.uid, 'manage_users') && !isUser(userId);
        }

        // --- Roles ---
        match /roles/{roleId} {
            // Allow role creation during company registration.
            allow create: if !userDocExists(request.auth.uid);
            
            // Allow admins to manage roles.
            allow read, update: if hasPermission(companyId, request.auth.uid, 'manage_roles');
        }

        // --- Audit Logs ---
        match /audit_logs/{logId} {
            allow read: if hasPermission(companyId, request.auth.uid, 'manage_users');
            allow create: if isAuth() && userCompanyId(request.auth.uid) == companyId;
        }
    }

    // --- User-Company Lookup ---
    match /user_company_lookup/{userId} {
        // Allow creation only during self-registration.
        allow create: if isUser(userId) && !userDocExists(request.auth.uid);
        
        // Allow a user to read their own lookup document.
        allow read: if isUser(userId);
    }
  }
}
