rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }

    function isUserInCompany(companyId) {
      if (!isSignedIn()) {
        return false;
      }
      // Check for existence of the lookup document before accessing its data.
      return exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
             && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    function getUserData(companyId, userId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data;
    }

    function getRolePermissions(companyId, roleName) {
      // It's safer to check for existence before accessing data
      if (exists(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName))) {
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
      }
      return [];
    }
    
    function hasPermission(companyId, permission) {
      if (!isUserInCompany(companyId)) {
        return false;
      }
      let userRole = getUserData(companyId, request.auth.uid).role;
      let permissions = getRolePermissions(companyId, userRole);
      // 'in' operator for lists checks for presence of the value.
      return permission in permissions;
    }
    
    function isPlatformAdmin() {
      if (!isSignedIn() || !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))) {
        return false;
      }
      let companyId = getUserCompanyId();
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      let userRole = getUserData(companyId, request.auth.uid).role;
      return companyName == "Cloud Morphix" && userRole == "Admin";
    }

    // --- Rules ---

    match /companies/{companyId} {
      // Allow a user to create a company document. The backend function is trusted to do this correctly.
      allow create: if isSignedIn();
      
      // Allow reads if the user belongs to the company.
      allow read: if isUserInCompany(companyId);

      // No one can update or delete a company document directly for now.
      allow update, delete: if false;

      // --- Sub-collections ---

      match /users/{userId} {
        allow read: if isUserInCompany(companyId);
        
        // Allow creating a user if:
        // 1. You are creating your own user document (registration).
        // 2. You have 'manage_users' permission in that company.
        allow create: if (isSignedIn() && request.auth.uid == userId) || hasPermission(companyId, 'manage_users');
        
        // Allow updating a user if:
        // 1. You are updating your own name.
        // 2. An admin is changing a user's role.
        // 3. An ETL process is updating the dashboard URL.
        allow update: if (request.auth.uid == userId && request.resource.data.keys().hasOnly(['fullName'])) ||
                         (hasPermission(companyId, 'manage_users') && request.resource.data.keys().hasOnly(['role'])) ||
                         (isSignedIn() && request.resource.data.keys().hasOnly(['dashboardUrl']));
        
        // Allow deleting a user if you have 'manage_users' permission and it's not you.
        allow delete: if hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
      }

      match /roles/{roleName} {
        allow read: if isUserInCompany(companyId);
        
        // Allow role creation during the initial company setup, or by an admin with permissions.
        allow create: if isSignedIn() || hasPermission(companyId, 'manage_roles');
        
        // Don't allow direct updates or deletes to roles from the client for now.
        allow update, delete: if false;
      }
      
      match /audit_logs/{logId} {
        // Only admins can read audit logs.
        allow read: if hasPermission(companyId, 'manage_roles');
        // Any authenticated user in the company can trigger an action that creates a log.
        allow create: if isUserInCompany(companyId);
        // Logs are immutable.
        allow update, delete: if false;
      }
    }
    
    match /user_company_lookup/{userId} {
      // You can only read your own lookup document.
      allow read: if isSignedIn() && request.auth.uid == userId;

      // Allow creating a lookup doc if:
      // 1. You are creating your own (registration).
      // 2. An admin with 'manage_users' is creating one for a new user.
      allow create: if (isSignedIn() && request.auth.uid == userId) || hasPermission(request.resource.data.companyId, 'manage_users');
      
      // Lookups are immutable.
      allow update: if false; 
      
      // Allow deletion if the requester has 'manage_users' permission for that company.
      allow delete: if hasPermission(get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId, 'manage_users');
    }

    match /contacts/{contactId} {
      // Anyone can submit the contact form.
      allow create: if true;
      // Only platform admins can see the submissions.
      allow read, list, delete: if isPlatformAdmin();
      allow update: if false;
    }
  }
}
