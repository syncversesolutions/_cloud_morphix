rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserCompanyId(userId) {
      // This function assumes the lookup document exists.
      // Always use exists() before calling this.
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function userIsInCompany(userId, companyId) {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(userId)) &&
             getUserCompanyId(userId) == companyId;
    }
    
    function userIsCompanyAdmin(userId, companyId) {
      // This also assumes the user and company docs exist.
      return userIsInCompany(userId, companyId) &&
             exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
             get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role == 'Admin';
    }

    function isPlatformAdmin() {
      // A platform admin is an 'Admin' of the 'Cloud Morphix' company.
      // This function has multiple gets, so it should be used carefully.
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             userIsCompanyAdmin(request.auth.uid, getUserCompanyId(request.auth.uid)) &&
             (get(/databases/$(database)/documents/companies/$(getUserCompanyId(request.auth.uid))).data.company_name == 'Cloud Morphix' ||
              get(/databases/$(database)/documents/companies/$(getUserCompanyId(request.auth.uid))).data.company_name == 'loud morphix');
    }
    
    // --- Rules ---

    // Contacts collection: Allow anyone to create, but not read/update/delete
    match /contacts/{contactId} {
      allow create: if request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.companyName is string;
      allow read, update, delete: if false;
    }
    
    // User company lookup table
    match /user_company_lookup/{userId} {
      // Read: A user can read their own lookup doc.
      allow get: if isUserAuthenticated() && request.auth.uid == userId;

      // Create: A user is creating their own entry, OR an admin of the target company is creating it.
      allow create: if isUserAuthenticated() && 
                       (request.auth.uid == userId || userIsCompanyAdmin(request.auth.uid, request.resource.data.companyId));
                       
      allow list, update, delete: if false;
    }

    // Companies collection
    match /companies/{companyId} {
      // Read: Any user belonging to this company can read the company doc. Platform admins can read any.
      allow get: if userIsInCompany(request.auth.uid, companyId) || isPlatformAdmin();
      
      // List: Only platform admins can list all companies.
      allow list: if isPlatformAdmin();
      
      // Create: Any authenticated user can create a company (during registration).
      allow create: if isUserAuthenticated();
      
      // Update: Only admins of this company.
      allow update: if userIsCompanyAdmin(request.auth.uid, companyId);
      
      allow delete: if false;

      // -- Users subcollection --
      match /users/{userId} {
        // Read: A user can read their own profile, or a company admin can read any user in their company.
        allow get: if (isUserAuthenticated() && request.auth.uid == userId) || userIsCompanyAdmin(request.auth.uid, companyId);

        // List: A company admin can list all users in their company.
        allow list: if userIsCompanyAdmin(request.auth.uid, companyId);
        
        // Create: A new user is creating their own profile, or an admin is creating one for someone else.
        allow create: if isUserAuthenticated() &&
                         (request.auth.uid == userId || userIsCompanyAdmin(request.auth.uid, companyId));
                         
        // Update: A user can update their own profile, or a company admin can update any profile.
        allow update: if (isUserAuthenticated() && request.auth.uid == userId) || userIsCompanyAdmin(request.auth.uid, companyId);

        // Delete: An admin of the company.
        allow delete: if userIsCompanyAdmin(request.auth.uid, companyId);
      }
      
      // -- Roles subcollection --
      match /roles/{roleId} {
        // Read: Any user in the company can read/list roles.
        allow get, list: if userIsInCompany(request.auth.uid, companyId);
        
        // Write: Only company admins can manage roles.
        allow create, update, delete: if userIsCompanyAdmin(request.auth.uid, companyId);
      }
      
      // -- Audit Logs subcollection --
      match /audit_logs/{logId} {
        // Read: Only company admins.
        allow get, list: if userIsCompanyAdmin(request.auth.uid, companyId);
        
        // Write: Only company admins.
        allow create: if userIsCompanyAdmin(request.auth.uid, companyId);

        allow update, delete: if false;
      }
    }
    
    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
