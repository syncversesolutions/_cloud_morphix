
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthed() {
      return request.auth != null;
    }

    function isAdmin(companyId) {
      return isAuthed() 
             && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin"
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.company_id == companyId;
    }
    
    match /users/{userId} {
      allow get: if isAuthed() && request.auth.uid == userId;
      // Allow admins to list users in their own company.
      // The client-side code is responsible for filtering by the correct companyId.
      allow list: if isAuthed() 
                  && exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
                  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
      allow create: if true;
    }

    match /companies/{companyId} {
      allow get: if isAuthed() 
                 && exists(/databases/$(database)/documents/users/$(request.auth.uid))
                 && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.company_id == companyId;
      allow create, update: if isAdmin(companyId);

      match /roles/{roleId} {
        allow get, list, create, delete: if isAdmin(companyId);
      }
      
      match /invites/{inviteId} {
        // Anyone with a direct link can read an invitation to sign up.
        allow get: if true;
        // Admins can manage invites.
        allow list, create: if isAdmin(companyId);
        // The invited user can update their own invitation to 'accepted' after signing up.
        allow update: if isAuthed() && request.auth.token.email == resource.data.email;
      }
    }
  }
}
