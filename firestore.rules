rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserProfile(userId) {
      // Use exists() to prevent errors on non-existent documents.
      if (!exists(/databases/$(database)/documents/user_company_lookup/$(userId))) {
        return null;
      }
      let companyId = get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
      if (!exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId))) {
        return null;
      }
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data;
    }
    
    function hasPermission(permission) {
        // Can't check permissions if not authenticated
        if (!isAuthenticated()) {
          return false;
        }
        let userProfile = getUserProfile(request.auth.uid);
        // If profile doesn't exist yet, they have no permissions.
        if (userProfile == null) {
          return false;
        }
        // The 'Admin' role implicitly has all permissions.
        return userProfile.role == 'Admin' || (userProfile.allowed_actions != null && permission in userProfile.allowed_actions);
    }

    function isRole(roleName) {
        if (!isAuthenticated()) {
            return false;
        }
        let userProfile = getUserProfile(request.auth.uid);
        if (userProfile == null) {
            return false;
        }
        return userProfile.role == roleName;
    }
    
    function isCompanyMember(companyId) {
        return isAuthenticated() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    // --- User Company Lookup ---
    match /user_company_lookup/{userId} {
      allow read: if isAuthenticated();
      // Allow a user to create their own lookup doc, or an admin to create one for them.
      allow create: if request.auth.uid == userId || hasPermission('manage_users');
      allow update, delete: if false; // Should not be modified directly.
    }

    // --- Contacts Collection ---
    match /contacts/{contactId} {
        // Platform admins (from Cloud Morphix company) can read.
        allow read: if isRole('Admin') && getUserProfile(request.auth.uid).companyName == 'Cloud Morphix';
        allow create: if true; // Anyone can submit form.
        allow update, delete: if false;
    }

    // --- Companies Collection ---
    match /companies/{companyId} {
      // DENY all writes by default. Permissions must be explicitly granted below.
      allow write: if false;
      
      // ALLOW creation of a company doc during registration.
      allow create: if isAuthenticated();
      
      // ALLOW any authenticated member of the company to read the main company document.
      allow read: if isCompanyMember(companyId);

      // --- Users Sub-collection ---
      match /users/{userId} {
        // Allow an admin to read any user profile in their company, or a user to read their own.
        allow read: if hasPermission('manage_users') || request.auth.uid == userId;
        
        // Allow an admin to create new users OR a user to create their own profile during registration.
        allow create: if hasPermission('manage_users') || request.auth.uid == userId;

        // Allow users to update their own name.
        // Allow admins to update anyone's role or dashboard URL.
        allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                         (hasPermission('manage_users') && (
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']) ||
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dashboardUrl'])
                         ));

        // Allow admins to remove users.
        allow delete: if hasPermission('manage_users');
      }
      
      // ---- Roles Sub-collection ----
      match /roles/{roleName} {
        // Any user in the company can read the roles.
        allow read: if isCompanyMember(companyId);

        // Allow roles to be created during the initial company setup,
        // OR allow modification by users with 'manage_roles' permission.
        allow write: if (request.method == 'create' && !exists(/databases/$(database)/documents/companies/$(companyId))) || hasPermission('manage_roles');
      }

      // ---- Audit Logs Sub-collection ----
      match /audit_logs/{logId} {
        // Only admins can read audit logs.
        allow read: if hasPermission('manage_users');
        // Logs are created server-side, not from the client.
        allow write: if false; 
      }
    }
  }
}
