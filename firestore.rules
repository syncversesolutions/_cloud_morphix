rules_version = '2';

service cloud.firestore {
  database /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // A user is new if they are authenticated but their lookup doc doesn't exist yet.
    // This is the key for allowing the registration batch write.
    function isNewUser() {
      return isAuthenticated() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    function getCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }
    
    function isMemberOf(companyId) {
      return isAuthenticated() && getCompanyId() == companyId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/companies/$(getCompanyId())/users/$(request.auth.uid)).data;
    }

    function getRolePermissions() {
      return get(/databases/$(database)/documents/companies/$(getCompanyId())/roles/$(getUserData().role)).data.allowed_actions;
    }

    function hasPermission(permission) {
      // Ensure the user has a role and that role has permissions defined.
      return isAuthenticated() &&
             'role' in getUserData() &&
             getUserData().role != null &&
             getRolePermissions()[permission] == true;
    }
    
    function isPlatformAdmin() {
      // The source of truth for being a platform admin is a flag on the user's own document.
      return isAuthenticated() && getUserData().isPlatformAdmin == true;
    }

    // --- Rules ---

    match /companies/{companyId} {
      allow create: if isNewUser();
      allow read: if isMemberOf(companyId) || isPlatformAdmin();
      allow list: if isPlatformAdmin();
      allow update: if hasPermission('manage_company_settings'); // Future-proof permission
    }

    match /companies/{companyId}/users/{userId} {
      allow create: if isNewUser() || hasPermission('manage_users');
      allow read, list: if isMemberOf(companyId);

      // Users can update their own full name.
      // Admins can update another user's role.
      allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                       (hasPermission('manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));

      // Admins can delete other users.
      allow delete: if hasPermission('manage_users') && request.auth.uid != userId;
    }

    match /companies/{companyId}/roles/{roleId} {
      allow create: if isNewUser() || hasPermission('manage_roles');
      allow read, list: if isMemberOf(companyId);
      allow update: if hasPermission('manage_roles');
    }

    match /user_company_lookup/{userId} {
      allow create: if isNewUser() && request.auth.uid == userId;
      allow read: if request.auth.uid == userId || isPlatformAdmin();
      allow list: if false; // No one should list all lookups for security.
      allow delete: if hasPermission('manage_users');
    }

    match /contacts/{contactId} {
      allow create: if true; // Anyone can submit contact form
      allow read, list: if isPlatformAdmin();
    }
  }
}
