rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function userIsAuthenticated() {
      return request.auth != null;
    }

    function isOwnRecord(userId) {
      return userIsAuthenticated() && request.auth.uid == userId;
    }

    function isNewUserRegistration() {
      // True if the user is authenticated but doesn't have a lookup doc yet.
      return userIsAuthenticated() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    function getCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/companies/$(getCompanyId(userId))/users/$(userId)).data;
    }

    function getUserRole(userId) {
      return getUserData(userId).role;
    }

    function getUserPermissions(userId) {
      return get(/databases/$(database)/documents/companies/$(getCompanyId(userId))/roles/$(getUserRole(userId))).data.allowed_actions;
    }
    
    function isPlatformAdmin() {
      // Check for platform admin status in a single declarative expression.
      return userIsAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             (getUserData(request.auth.uid).role == 'Admin') &&
             (
               get(/databases/$(database)/documents/companies/$(getCompanyId(request.auth.uid))).data.company_name == 'Cloud Morphix' ||
               get(/databases/$(database)/documents/companies/$(getCompanyId(request.auth.uid))).data.company_name == 'loud morphix'
             );
    }
    
    function userIsInCompany(companyId) {
      return userIsAuthenticated() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && getCompanyId(request.auth.uid) == companyId;
    }

    function userHasPermission(permission) {
        return userIsAuthenticated() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) && permission in getUserPermissions(request.auth.uid);
    }
    
    // --- RULES ---

    // Contacts collection: anyone can create, only platform admin can read.
    match /contacts/{contactId} {
      allow create: if true;
      allow read: if isPlatformAdmin();
      allow update, delete: if false;
    }

    // User lookup: can only be created during registration and read by the owner.
    match /user_company_lookup/{userId} {
      allow read: if isOwnRecord(userId);
      allow create: if isNewUserRegistration() && isOwnRecord(userId);
      allow update, delete: if false;
    }
    
    match /companies/{companyId} {
      allow read: if userIsInCompany(companyId);
      allow create: if isNewUserRegistration();
      allow update, delete: if false; // Companies are not directly editable by users.

      // Users sub-collection
      match /users/{userId} {
        allow read: if userIsInCompany(companyId);
        allow create: if isNewUserRegistration() && isOwnRecord(userId);
        // Users can update their own fullName.
        // Users with 'manage_users' permission can update other users' roles.
        allow update: if (isOwnRecord(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                         (userHasPermission('manage_users') && userIsInCompany(companyId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
        allow delete: if userHasPermission('manage_users') && userIsInCompany(companyId);
      }
      
      // Roles sub-collection
      match /roles/{roleName} {
        allow read: if userIsInCompany(companyId);
        // Default roles can be created during registration.
        // Other roles can be created by users with 'manage_roles' permission.
        allow create: if (isNewUserRegistration() && (roleName == 'Admin' || roleName == 'Viewer' || roleName == 'Analyst')) ||
                         (userHasPermission('manage_roles') && userIsInCompany(companyId));
        allow update, delete: if false; // Roles are not editable/deletable for simplicity.
      }
      
      // Audit logs sub-collection
      match /audit_logs/{logId} {
        allow read: if userIsInCompany(companyId) && (userHasPermission('manage_users') || userHasPermission('manage_roles'));
        // Any authenticated user in the company can trigger actions that create audit logs.
        allow create: if userIsInCompany(companyId); 
        allow update, delete: if false;
      }
    }
  }
}
