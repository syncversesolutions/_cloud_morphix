rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isCompanyAdmin(companyId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isUserInCompany(companyId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function isPlatformAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             // Use a direct get() path instead of a nested get()
             get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // --- Collection Rules ---

    // Contacts: Allow public creation for demo requests. Deny all reads.
    match /contacts/{contactId} {
      allow create: request.resource.data.name is string &&
                    request.resource.data.email is string &&
                    request.resource.data.companyName is string;
      allow read, update, delete: false;
    }

    // User Lookup: Maps a user's UID to their company ID.
    match /user_company_lookup/{userId} {
      allow get: request.auth.uid == userId;
      // Allow creation if it's your own user or you are an admin of the target company.
      allow create: isUserAuthenticated() &&
                    (request.auth.uid == userId || isCompanyAdmin(request.resource.data.companyId));
      allow list, update, delete: false;
    }

    // Companies: The main data container for each tenant.
    match /companies/{companyId} {
      allow get: isUserInCompany(companyId) || isPlatformAdmin();
      allow list: isPlatformAdmin();
      allow create: isUserAuthenticated();
      allow update: isCompanyAdmin(companyId);
      allow delete: false;

      // Users Subcollection
      match /users/{userId} {
        allow get: request.auth.uid == userId || isCompanyAdmin(companyId);
        allow list: isCompanyAdmin(companyId);
        allow create: isUserAuthenticated() && (request.auth.uid == userId || isCompanyAdmin(companyId));
        allow update: request.auth.uid == userId || isCompanyAdmin(companyId);
        allow delete: isCompanyAdmin(companyId);
      }

      // Roles Subcollection
      match /roles/{roleId} {
        allow get, list: isUserInCompany(companyId);
        allow create, update, delete: isCompanyAdmin(companyId);
      }

      // Audit Logs Subcollection
      match /audit_logs/{logId} {
        allow get, list: isCompanyAdmin(companyId);
        allow create: isCompanyAdmin(companyId);
        allow update, delete: false;
      }
    }
  }
}
