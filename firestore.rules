rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules reusable and readable.
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserCompanyId() {
      return getUserData().company.id;
    }
    
    function isUserAdmin() {
      return getUserData().company.role == 'Admin';
    }

    function isUserInCompany(companyId) {
      return isUserAuthenticated() && getUserCompanyId() == companyId;
    }

    // USERS collection rules
    match /users/{userId} {
      // A user can create their own document during sign-up.
      allow create: if isUserAuthenticated();
      
      // A user can read their own profile. An admin can read profiles of users in their company.
      allow get: if isUserProfileOwner(userId);
      allow list: if isUserAdmin();

      // A user can only update their own 'profile' map. They cannot change their company or role.
      // An admin can update another user's 'company.role'.
      allow update: if isUserProfileOwner(userId) && request.resource.data.keys().hasOnly(['profile'])
                   || (isUserAdmin() && request.resource.data.keys().hasAny(['company']));

      // Only an admin can remove a user from the company (by deleting their document).
      allow delete: if isUserAdmin();
    }

    // COMPANIES collection rules
    match /companies/{companyId} {
      // Any authenticated user can create a company during registration.
      allow create: if isUserAuthenticated();

      // Any user belonging to the company can read the company document.
      allow read: if isUserInCompany(companyId);

      // Only Admins of that company can update company settings or roles array.
      allow update: if isUserAdmin() && isUserInCompany(companyId);
      
      // Deleting a company should be handled by a backend process, not directly by a client.
      allow delete: if false;

      // SUBCOLLECTION rules
      
      // INVITES subcollection
      match /invites/{inviteId} {
          // Anyone with a link can read an invite to verify it.
          allow get: if true;
          // Admins of the company can list all invites.
          allow list: if isUserAdmin() && isUserInCompany(companyId);
          // Admins can create invites.
          allow create: if isUserAdmin() && isUserInCompany(companyId);
          // Anyone can update an invite to accept it.
          allow update: if request.resource.data.status == 'accepted';
      }
      
      // AUDIT LOGS subcollection
      match /audit_logs/{logId} {
        // Only admins can read the audit logs.
        allow read: if isUserAdmin() && isUserInCompany(companyId);
        // Logs are write-only from the backend (our service functions), so client writes are denied.
        allow write: if false;
      }
    }
    
    // CONTACTS collection rules for public contact form
    match /contacts/{contactId} {
      // Anyone can create (submit) a contact form.
      allow create: if true;
      
      // No client should be able to read, update, or delete submissions.
      // This data should be accessed by a backend process or admin console.
      allow read, update, delete: if false;
    }
  }
}
