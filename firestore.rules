
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Path: /contacts/{contactId} ---
    // This collection stores submissions from the public "Book a Demo" form.
    match /contacts/{contactId} {
      // Allow anyone to create a document. This is a public-facing form.
      // We perform basic validation to ensure the submitted data has the expected fields.
      allow create: if request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.companyName is string;

      // Only platform admins can read or manage contact submissions.
      allow read, update, delete: if
          request.auth != null &&
          exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // --- Path: /user_company_lookup/{userId} ---
    // This collection maps a user's UID to their company ID for efficient lookups.
    match /user_company_lookup/{userId} {
      // A user can read their own lookup document.
      allow get: if request.auth.uid == userId;

      // 1. A new user can create their own lookup document during company registration.
      // 2. An existing company admin can create a lookup document when adding a new user to their company.
      allow create: if (request.auth.uid == userId) ||
                       (
                         request.auth != null &&
                         exists(/databases/$(database)/documents/companies/$(request.resource.data.companyId)/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/companies/$(request.resource.data.companyId)/users/$(request.auth.uid)).data.role == 'Admin'
                       );
      // Lookups are permanent once created; they are only removed when a user is deleted from a company,
      // which should be handled by a backend function for security.
      allow update, delete: if false;
    }

    // --- Path: /companies/{companyId} ---
    // This is the main collection holding all company-specific data.
    match /companies/{companyId} {
      // Allow a user to create a company document ONLY IF they are also creating their own user profile
      // within that company and assigning themselves the 'Admin' role. This is a critical security rule
      // for the registration process, using getAfter() to inspect the state after the batch write.
      allow create: if request.auth.uid != null &&
                       getAfter(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';

      // Allow a user to read their own company's document, or allow a platform admin to read any company document.
      allow get: if (
          request.auth != null &&
          exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId
        ) || (
          request.auth != null &&
          exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.isPlatformAdmin == true
        );

      // Only platform admins can get a list of all companies.
      allow list: if
        request.auth != null &&
        exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.isPlatformAdmin == true;

      // Only a company admin can update their company's details.
      allow update: if
        request.auth != null &&
        exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';


      // --- Subcollection: /companies/{companyId}/users/{userId} ---
      match /users/{userId} {
        // A user can read their own profile, or a company admin can read any profile in their company.
        allow get: if (request.auth.uid == userId) ||
                      (
                        request.auth != null &&
                        exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin'
                      );

        // A company admin can list all users in their company.
        allow list: if
          request.auth != null &&
          exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';

        // A user can create their own profile (registration), or an admin can create one for a new user.
        allow create: if (request.auth.uid == userId) ||
                         (
                           request.auth != null &&
                           exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin'
                         );

        // A user can update their own profile, or an admin can update any profile in their company.
        allow update: if (request.auth.uid == userId) ||
                         (
                           request.auth != null &&
                           exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin'
                         );

        // Only a company admin can delete a user.
        allow delete: if
          request.auth != null &&
          exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';
      }

      // --- Subcollection: /companies/{companyId}/roles/{roleId} ---
      match /roles/{roleId} {
        // Any user belonging to the company can read the available roles.
        allow get, list: if
          request.auth != null &&
          exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;

        // Creating default roles is handled by the company `create` rule.
        // Only company admins can modify roles after creation.
        allow create, update, delete: if
          request.auth != null &&
          exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';
      }

      // --- Subcollection: /companies/{companyId}/audit_logs/{logId} ---
      match /audit_logs/{logId} {
          // Only company admins can view or create audit logs.
          allow read, write: if
            request.auth != null &&
            exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role == 'Admin';
      }
    }
  }
}
