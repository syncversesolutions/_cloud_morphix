rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes.
    // More specific rules below will grant access where needed.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- HELPER FUNCTIONS ---
    // These functions help reduce code duplication. They must return a single boolean expression.

    // Checks if the user is authenticated via Firebase Auth.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if a user belongs to a specific company.
    function isUserInCompany(companyId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    // Checks if a user has a specific permission (e.g., 'manage_users') within a company.
    function hasPermission(companyId, permission) {
      // It checks that the user exists in the company, that their role exists, and that the permission is granted to that role.
      return isUserInCompany(companyId) &&
             exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)) &&
             exists(/databases/$(database)/documents/companies/$(companyId)/roles/$(get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role)) &&
             permission in get(/databases/$(database)/documents/companies/$(companyId)/roles/$(get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role)).data.allowed_actions;
    }
    
    // Checks if the user is a platform-level administrator.
    function isPlatformAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             exists(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/companies/$(get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId)/users/$(request.auth.uid)).data.isPlatformAdmin == true;
    }

    // --- COLLECTION RULES ---

    // PUBLIC CONTACT FORM
    // Allow anyone to submit the contact form. No read/update/delete.
    match /contacts/{contactId} {
      allow create: if true;
    }

    // USER-TO-COMPANY LOOKUP TABLE
    match /user_company_lookup/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Allow creation for new user, or by an admin.
      allow create: if (isAuthenticated() && request.auth.uid == userId) || 
                       hasPermission(request.resource.data.companyId, 'manage_users');
      // Allow deletion by an admin.
      allow delete: if hasPermission(get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId, 'manage_users');
    }

    // COMPANIES & SUBCOLLECTIONS
    match /companies/{companyId} {
      allow list: if isPlatformAdmin();
      allow get: if isUserInCompany(companyId);
      allow create: if isAuthenticated();

      // -- USERS Subcollection --
      match /users/{userId} {
        allow read: if isUserIn-company(companyId);
        allow create: if (isAuthenticated() && request.auth.uid == userId) || 
                         hasPermission(companyId, 'manage_users');
        allow update: if (isAuthenticated() && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
                         hasPermission(companyId, 'manage_users');
        allow delete: if hasPermission(companyId, 'manage_users');
      }
      
      // -- ROLES Subcollection --
      match /roles/{roleId} {
        allow read: if isUserInCompany(companyId);
        allow create, update: if hasPermission(companyId, 'manage_roles');
      }

      // -- AUDIT LOGS Subcollection --
      match /audit_logs/{logId} {
        allow create: if isUserInCompany(companyId);
      }
    }
  }
}
