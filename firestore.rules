
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Is the user signed in?
    function isSignedIn() {
      return request.auth != null;
    }

    // Is this a new user registering for the first time?
    // This is true if they are signed in but don't have a company lookup doc yet.
    // This state only exists *before* the registration batch write commits.
    function isNewUser() {
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }

    // Does the signed-in user belong to the company they are trying to access?
    function isCompanyUser(companyId) {
      return isSignedIn() && exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid))
             && get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId == companyId;
    }

    // Get the user's role from their profile within a specific company.
    function getUserRole(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid)).data.role;
    }

    // Get all permissions for a given role name within a company.
    function getRolePermissions(companyId, roleName) {
      return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    // Does the current user have a specific permission?
    function hasPermission(companyId, permission) {
      let role = getUserRole(companyId);
      let permissions = getRolePermissions(companyId, role);
      return permission in permissions;
    }

    // Is the user a platform admin of "Cloud Morphix"?
    function isPlatformAdmin() {
      let companyId = get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      return isCompanyUser(companyId) && getUserRole(companyId) == 'Admin' && companyName == 'Cloud Morphix';
    }


    // --- Rules ---

    // Company-level access
    match /companies/{companyId} {
      allow read: if isCompanyUser(companyId);

      // A new user can create a company document during registration.
      allow create: if isNewUser();

      // Nobody can update or delete top-level company documents for now.
      allow update, delete: if false;
    }

    // User profile access within a company
    match /companies/{companyId}/users/{userId} {
      allow read: if isCompanyUser(companyId);

      // Allow create under two conditions:
      // 1. A new user is creating their own 'Admin' profile.
      // 2. An existing admin is creating a new user (add user flow).
      allow create: if (isNewUser() && request.auth.uid == userId && request.resource.data.role == 'Admin')
                      || (hasPermission(companyId, 'manage_users') && request.auth.uid != userId);

      // Allow update under two conditions:
      // 1. A user is updating their own 'fullName'.
      // 2. An admin is updating another user's 'role'.
      allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
                      || (hasPermission(companyId, 'manage_users') && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));

      allow delete: if hasPermission(companyId, 'manage_users') && request.auth.uid != userId;
    }

    // Role definition access within a company
    match /companies/{companyId}/roles/{roleName} {
      allow read: if isCompanyUser(companyId);

      // Allow create under two conditions:
      // 1. A new user is creating the three default roles during registration.
      // 2. An existing admin is creating a new custom role.
      allow create: if (isNewUser() && (roleName == 'Admin' || roleName == 'Viewer' || roleName == 'Analyst'))
                      || hasPermission(companyId, 'manage_roles');

      // Only admins can update/delete roles, but not the 'Admin' role itself.
      allow update, delete: if hasPermission(companyId, 'manage_roles') && roleName != 'Admin';
    }

    // Lookup to map a user UID to their company ID
    match /user_company_lookup/{userId} {
      allow read: if request.auth.uid == userId;

      // A new user can create their own lookup document.
      allow create: if isNewUser() && request.auth.uid == userId;

      // Nobody can change or delete a lookup document.
      allow update, delete: if false;
    }

    // Contact form submissions
    match /contacts/{contactId} {
      // Anyone can submit the contact form.
      allow create: if true;
      
      // Only platform admins can read the submissions.
      allow read: if isPlatformAdmin();
      
      allow update, delete: if false;
    }
  }
}
