
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====
    function isSignedIn() {
      return request.auth != null;
    }

    // Is the user authenticated and do they not have a lookup doc yet?
    // This is the key to allowing the registration transaction.
    function isNewUser() {
      return isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));
    }
    
    // Get the company ID for a given user from the lookup table
    function getCompanyIdForUser(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }
    
    // Get a user's role name
    function getUserRole(userId) {
      let companyId = getCompanyIdForUser(userId);
      if (companyId == null) { return null; }
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
    }
    
    // Get a role's permissions array
    function getRolePermissions(roleName, companyId) {
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions;
    }

    // Does the currently authenticated user have a specific permission?
    function hasPermission(permission) {
        if (!isSignedIn()) { return false; }
        let userRole = getUserRole(request.auth.uid);
        let companyId = getCompanyIdForUser(request.auth.uid);
        if (userRole == null || companyId == null) { return false; }
        return permission in getRolePermissions(userRole, companyId);
    }
    
    // Is the current user a platform admin for Cloud Morphix?
    function isPlatformAdmin() {
      if (!isSignedIn()) { return false; }
      let companyId = getCompanyIdForUser(request.auth.uid);
      if (companyId == null) { return false; }
      let companyName = get(/databases/$(database)/documents/companies/$(companyId)).data.company_name;
      return getUserRole(request.auth.uid) == 'Admin' && companyName == 'Cloud Morphix';
    }

    // ===== USER LOOKUP TABLE =====
    // A user can create their own lookup document, and read it. No one else can.
    match /user_company_lookup/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if false;
    }

    // ===== COMPANIES =====
    match /companies/{companyId} {
      // Allow creation ONLY during new user registration
      allow create: if isNewUser();
      
      // Allow any user of that company to read the main company doc
      allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;

      allow update, delete: if false; // Company documents are immutable for now

      // --- Users Sub-collection ---
      match /users/{userId} {
        // Allow a user to create their own profile ONLY during registration, and they must be an Admin
        allow create: if isNewUser() && request.auth.uid == userId && request.resource.data.role == 'Admin';

        // Any user from the same company can read another user's profile
        allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;

        // Granular updates
        allow update: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId
                      && (
                        // A user can update their OWN fullName
                        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
                        ||
                        // An admin can update another user's role
                        (hasPermission('manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']))
                      );
        
        // An admin can delete a user (but not themselves)
        allow delete: if hasPermission('manage_users') && request.auth.uid != userId;
      }
      
      // --- Roles Sub-collection ---
      match /roles/{roleName} {
        // Allow role creation ONLY during company registration
        allow create: if isNewUser();
        
        // Any user in the company can read roles
        allow read: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId;

        // Only a user with 'manage_roles' permission can update/delete existing roles.
        // They can also create new roles after registration.
        allow write: if hasPermission('manage_roles');
      }

      // --- Audit Logs Sub-collection ---
      match /audit_logs/{logId} {
          allow read: if hasPermission('manage_users');
          // Allow any authenticated user in the company to create a log entry.
          allow create: if isSignedIn() && getCompanyIdForUser(request.auth.uid) == companyId; 
          allow update, delete: if false;
      }
    }
    
    // ===== CONTACTS =====
    // For the public contact form
    match /contacts/{contactId} {
        // Anyone can submit the form
        allow create: if true; 
        
        // Only platform admins can read the submissions
        allow read: if isPlatformAdmin();
        
        allow update, delete: if false;
    }
  }
}
