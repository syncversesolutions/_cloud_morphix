
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function isMemberOfCompany(companyId) {
      // Check if user is signed in, has a lookup doc, and the doc points to the given companyId
      return isSignedIn() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             getCompanyId(request.auth.uid) == companyId;
    }
    
    function getUserRole(userId, companyId) {
        return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.role;
    }

    function hasPermission(companyId, permission) {
      // Check if user is a member and their role has the required permission
      return isMemberOfCompany(companyId) &&
             permission in get(/databases/$(database)/documents/companies/$(companyId)/roles/$(getUserRole(request.auth.uid, companyId))).data.allowed_actions;
    }

    function isPlatformAdmin() {
      // Check if user is signed in, has a lookup doc, and their company name is 'Cloud Morphix'
      return isSignedIn() &&
             exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/companies/$(getCompanyId(request.auth.uid))).data.company_name == 'Cloud Morphix';
    }

    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }
    
    // --- Rules ---
    match /contacts/{contactId} {
      allow create: if true;
      allow read, update, delete: if isPlatformAdmin();
    }

    match /user_company_lookup/{userId} {
      allow read, create: if isOwner(userId);
      allow update, delete: if false;
    }

    match /companies/{companyId} {
      // Allow a user to create a company if they are authenticated and not already in one.
      allow create: if isSignedIn() && !exists(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid));

      allow read: if isMemberOfCompany(companyId);
      
      // Placeholder: only admins can update company info for now.
      allow update: if hasPermission(companyId, 'manage_roles');

      // --- Sub-Collections ---
      match /users/{userId} {
        allow read: if isMemberOfCompany(companyId);

        // A user is created during registration or when accepting an invite. Must be self-creation.
        allow create: if isOwner(userId);

        // User can update their own profile. An admin can update any user's profile.
        allow update: if isOwner(userId) || hasPermission(companyId, 'manage_users');

        // An admin can remove a user.
        allow delete: if hasPermission(companyId, 'manage_users');
      }

      match /roles/{roleName} {
        allow read: if isMemberOfCompany(companyId);

        // Allow role creation during company setup OR if user has permission.
        allow create: if (!exists(/databases/$(database)/documents/companies/$(companyId))) || hasPermission(companyId, 'manage_roles');
        
        allow update, delete: if hasPermission(companyId, 'manage_roles');
      }

      match /invites/{inviteId} {
        // Any signed-in user can read an invite to accept it, but only members can list all invites for their company.
        allow get: if isSignedIn();
        allow list: if isMemberOfCompany(companyId);

        allow create: if hasPermission(companyId, 'manage_users');
        
        // An invite can be updated only by the person it was sent to, to accept it.
        allow update: if isOwner(request.resource.data.accepted_by_uid) && resource.data.status == 'pending';
        
        allow delete: if hasPermission(companyId, 'manage_users');
      }

      match /audit_logs/{logId} {
        allow read, create: if isMemberOfCompany(companyId);
        allow update, delete: if false; // Logs are immutable
      }
    }
  }
}
