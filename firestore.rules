
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function isOwnRecord(userId) {
      return isAuthed() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isCompanyAdmin(companyId) {
      // Check if the user is authenticated, belongs to the specified company, and has the 'Admin' role.
      return isAuthed() && getUserData().company_id == companyId && getUserData().role == "Admin";
    }

    // --- Collection Rules ---
    
    // Allow user creation during sign-up.
    // Users can only read or update their own profile.
    match /users/{userId} {
      allow read, update: if isOwnRecord(userId);
      allow create: if isAuthed();
    }
    
    // Allow company creation during sign-up.
    // Only an admin of that company can read or update it.
    match /companies/{companyId} {
      allow read, update: if isCompanyAdmin(companyId);
      allow create: if isAuthed();
    }
    
    // Only an admin of the parent company can manage roles.
    match /companies/{companyId}/roles/{roleId} {
      allow read, write: if isCompanyAdmin(companyId);
    }
    
    // Only an admin of the company can create or read invites.
    match /invites/{inviteId} {
      // Allow read (get, list) if the user is an admin.
      // The client-side query MUST restrict reads to the user's own companyId for this to be secure.
      allow read: if isAuthed() && getUserData().role == "Admin";
      
      // Allow creating an invite if the user is an admin of the company in the invite.
      allow create: if isCompanyAdmin(request.resource.data.company_id);
    }
  }
}
