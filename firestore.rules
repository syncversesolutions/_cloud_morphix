
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Functions ---
    // These functions provide reusable logic for the rules below.

    // Is the user signed in?
    function isSignedIn() {
      return request.auth != null;
    }

    // Does the requesting user's UID match the document's UID?
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Get the company document for a given companyId
    function getCompany(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId));
    }

    // Get the user's profile document within a company
    function getUserProfile(companyId, userId) {
      return get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId));
    }
    
    // Get the ID of the company the current user belongs to
    function usersCompanyId() {
      return get(/databases/$(database)/documents/user_company_lookup/$(request.auth.uid)).data.companyId;
    }

    // Get the role of the current user
    function usersRole() {
      let companyId = usersCompanyId();
      return getUserProfile(companyId, request.auth.uid).data.role;
    }

    // Does the current user have a specific permission?
    function hasPermission(permission) {
        let companyId = usersCompanyId();
        let roleName = usersRole();
        // The role document ID is the role name.
        return get(/databases/$(database)/documents/companies/$(companyId)/roles/$(roleName)).data.allowed_actions.hasAny([permission]);
    }

    // --- Rules ---

    // Company documents
    match /companies/{companyId} {
      // Anyone signed in can create a company, as this is the first step of registration.
      // The other documents in the registration batch write are validated by their own rules.
      allow create: if isSignedIn();
      
      // Allow reading if the user belongs to the company.
      allow read: if isSignedIn() && usersCompanyId() == companyId;

      // No one can update or delete a whole company document directly.
      allow update, delete: if false;
    }

    // User profile documents, stored in a sub-collection of their company.
    match /companies/{companyId}/users/{userId} {
      // Allow creation if the user is creating their OWN profile OR if an admin with permission is creating it.
      allow create: if isOwner(userId) || (isSignedIn() && hasPermission('manage_users'));
      
      // Allow reading if the user belongs to the company.
      allow read: if isSignedIn() && usersCompanyId() == companyId;

      // Allow updates only for specific fields based on role.
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName']))
                      || (hasPermission('manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
      
      // Allow deletion only by an admin with permission.
      allow delete: if hasPermission('manage_users');
    }
    
    // Role documents, stored in a sub-collection of their company.
    match /companies/{companyId}/roles/{roleId} {
        // Allow full management by users with the 'manage_roles' permission.
        allow write: if hasPermission('manage_roles');

        // Allow reading if the user belongs to the company.
        allow read: if isSignedIn() && usersCompanyId() == companyId;
    }
    
     // Audit logs, stored in a sub-collection of their company.
    match /companies/{companyId}/audit_logs/{logId} {
        // Only allow creation by authenticated users of that company (via backend functions).
        allow create: if isSignedIn() && usersCompanyId() == companyId;
        
        // Only allow reading by users with 'manage_users' or 'manage_roles' permissions (i.e., admins).
        allow read: if hasPermission('manage_users') || hasPermission('manage_roles');
        
        // Logs are immutable.
        allow update, delete: if false;
    }
    
    // The lookup table maps a user's UID to their company's ID.
    match /user_company_lookup/{userId} {
        // Allow creation if the user is creating their OWN lookup OR if an admin is creating it for a new user.
        allow create: if isOwner(userId) || (isSignedIn() && hasPermission('manage_users'));

        // Only allow a user to read their own lookup document.
        allow read: if isOwner(userId);
        
        // Allow deletion only by an admin with permission when removing a user.
        allow delete: if hasPermission('manage_users');
        
        // No updates allowed.
        allow update: if false;
    }
    
    // Contact form submissions
    match /contacts/{contactId} {
        // Allow anyone to submit the form.
        allow create: if true;
        
        // Allow any signed-in user to read (App logic restricts this to platform admins).
        allow read: if isSignedIn();
        
        // No updates or deletes from the client.
        allow update, delete: if false;
    }
  }
}
