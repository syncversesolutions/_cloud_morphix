rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isCompanyMember(companyId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid));
    }
    
    function userHasPermission(companyId, permission) {
      let userDoc = get(/databases/$(database)/documents/companies/$(companyId)/users/$(request.auth.uid));
      if (!('data' in userDoc) || !('role' in userDoc.data)) {
        return false;
      }
      let userRole = userDoc.data.role;
      let roleDoc = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userRole));
      if (!('data' in roleDoc) || !('allowed_actions' in roleDoc.data)) {
        return false;
      }
      // 'in' operator checks for key in a map, or presence in a list for rules version 2
      return permission in roleDoc.data.allowed_actions;
    }

    // --- Public Unauthenticated Routes ---
    
    // Allow anyone to submit a contact form
    match /contacts/{contactId} {
      allow create: if true;
      allow read, update, delete: if false; 
    }
    
    // Allow anyone with a valid link to read invite details to register
    match /companies/{companyId}/invites/{inviteId} {
      allow read: if true;
      // Writing invites is restricted to authenticated users with permissions
      allow write: if isCompanyMember(companyId) && userHasPermission(companyId, 'manage_users');
    }
    
    // --- Authenticated Routes ---
    
    // Allow users to create their own company lookup entry, and read only their own
    match /user_company_lookup/{userId} {
      allow read, create: if request.auth.uid == userId;
      allow update, delete: if false; 
    }

    // COMPANY DOCUMENT: Governs the top-level company document itself
    match /companies/{companyId} {
      // Allow authenticated user to create a company. The transaction for users/roles is handled below.
      allow create: if isUserAuthenticated();
      allow read: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId) && userHasPermission(companyId, 'manage_roles');
    }
    
    // ROLES SUB-COLLECTION
    match /companies/{companyId}/roles/{roleName} {
       // Allow creation of default roles ONLY during registration. This is key for the initial setup.
       allow create: if request.resource.data.role_name == 'Admin' || request.resource.data.role_name == 'Viewer' || request.resource.data.role_name == 'Analyst';
       // Existing admins can manage roles fully.
       allow read, update, delete: if isCompanyMember(companyId) && userHasPermission(companyId, 'manage_roles');
    }

    // USERS SUB-COLLECTION
    match /companies/{companyId}/users/{userId} {
      // Allow a user to create their OWN user document (for registration or invite)
      allow create: if request.auth.uid == userId;
      // Allow users to read their own profile, or admins to read any profile in their company
      allow read: if request.auth.uid == userId || (isCompanyMember(companyId) && userHasPermission(companyId, 'manage_users'));
      // Allow users to update their own profile, or admins to update others
      allow update: if request.auth.uid == userId || (isCompanyMember(companyId) && userHasPermission(companyId, 'manage_users'));
      // Allow only admins to delete users
      allow delete: if isCompanyMember(companyId) && userHasPermission(companyId, 'manage_users');
    }

    // AUDIT LOGS SUB-COLLECTION
    match /companies/{companyId}/audit_logs/{logId} {
      // Only readable by admins
      allow read: if isCompanyMember(companyId) && userHasPermission(companyId, 'manage_users');
      // Not writable from the client
      allow write: if false;
    }
  }
}
