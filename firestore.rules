
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getCompanyId(userId) {
      return get(/databases/$(database)/documents/user_company_lookup/$(userId)).data.companyId;
    }

    function getUserPermissions(userId) {
        let companyId = getCompanyId(userId);
        let userDoc = get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data;
        let roleDoc = get(/databases/$(database)/documents/companies/$(companyId)/roles/$(userDoc.role)).data;
        return roleDoc.allowed_actions;
    }

    function hasPermission(permission) {
        return isAuthenticated() && permission in getUserPermissions(request.auth.uid);
    }

    // --- Collection Rules ---

    // Contacts collection is write-only for anyone (for the contact form). No reads.
    match /contacts/{contactId} {
      allow read: if false;
      allow write: if true; 
    }

    // User-to-company lookup collection rules.
    match /user_company_lookup/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if hasPermission('manage_users');
      allow update, delete: if false;
    }

    // Default for all documents within a company is READ-ONLY for authorized members.
    // Writes are DENIED by default and must be explicitly allowed by more specific rules below.
    match /companies/{companyId}/{document=**} {
      allow read: if hasPermission('view_dashboard') && getCompanyId(request.auth.uid) == companyId;
      allow write: if false;
    }

    // Specific rules for the 'roles' sub-collection.
    match /companies/{companyId}/roles/{roleName} {
      allow create, update: if hasPermission('manage_roles') && getCompanyId(request.auth.uid) == companyId;
    }
    
    // Specific rules for the 'users' sub-collection.
    match /companies/{companyId}/users/{userId} {
      allow create: if hasPermission('manage_users') && getCompanyId(request.auth.uid) == companyId;
      
      allow delete: if hasPermission('manage_users') && getCompanyId(request.auth.uid) == companyId && request.auth.uid != userId;
      
      // Allow updates under specific conditions:
      // 1. A user is updating their own fullName.
      // 2. An admin is updating a user's role.
      // 3. An external process (ETL) is updating only the dashboardUrl.
      allow update: if getCompanyId(request.auth.uid) == companyId && (
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fullName'])) ||
        (hasPermission('manage_users') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])) ||
        (hasPermission('view_dashboard') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dashboardUrl']))
      );
    }
  }
}
