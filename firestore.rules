rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function doesUserProfileExist() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function getUserProfile() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isCompanyAdmin(companyId) {
      // Check existence before accessing data to avoid errors during user creation
      return isUserAuthenticated() && doesUserProfileExist() && getUserProfile().company_id == companyId && getUserProfile().role == "Admin";
    }

    function isCompanyMember(companyId) {
      return isUserAuthenticated() && doesUserProfileExist() && getUserProfile().company_id == companyId;
    }
    
    match /companies/{companyId} {
      // Anyone authenticated can create a company, their profile is created in the same batch
      allow create: if isUserAuthenticated();
      
      // Allow GET for invite flow (unauthenticated) and for company admins ONLY
      allow get: if isCompanyAdmin(companyId) || request.auth == null;
      
      // Only admins can update company details
      allow update: if isCompanyAdmin(companyId);
      allow delete: if false;

      match /roles/{roleId} {
        // Admins can manage roles
        allow get, list, create: if isCompanyAdmin(companyId);
        allow delete, update: if false;
      }
      
      match /invites/{inviteId} {
        // Admins can manage invites
        allow get, list, create: if isCompanyAdmin(companyId);
        // The invited user (unauthenticated) can read their own invite to register
        allow get: if request.auth == null;
        // The new user can update their own invite to 'accepted'
        allow update: if isUserAuthenticated() && request.resource.data.status == 'accepted' && request.resource.data.accepted_by_uid == request.auth.uid;
        allow delete: if false;
      }
    }
    
    match /users/{userId} {
      // A user can read/update their own profile
      allow read, update: if isUserAuthenticated() && request.auth.uid == userId;
      // Admins can read any user profile in their company
      allow read: if isUserAuthenticated() && doesUserProfileExist() && isCompanyAdmin(getUserProfile().company_id);
      // Users are created via registration/invite flows, not direct writes.
      allow create: if isUserAuthenticated();
      allow delete: if false;
    }
  }
}
